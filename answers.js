// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

var sum = 0;
for (var i = 1; i < 1000; i++) {
  if (i % 3 === 0 || i % 5 ===0) {
    sum += i;
  }
}
console.log(sum);

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

var fib = [1,2];
var curr, prev;
var sum = 0;

while (true) {

  curr = fib[fib.length - 1];
  prev = fib[fib.length - 2];

  if (curr % 2 === 0) {
    if (curr <= 4000000) {
      sum += curr;
    } else {
      break;
    }
  }

  fib.push(curr + prev);

}

console.log(sum);

// The prime factors of 13195 are 5, 7, 13 and 29.

// What is the largest prime factor of the number 600851475143 ?

// function isPrime(num) {  // Lol. As I grow old...
//   for (var i = num-1; i > 1; i--) {
//     if (num % i === 0) {
//       return false;
//     }
//   }
//   return true;
// }


// function getSmallestFactor(num) { //cool. not necessary here.
//   var i = 2;
//   var divisor;
//   while (!divisor) {
//     if (num % i === 0) {
//       return i;
//     }
//     i++;
//   }
// }

function getSmallestPrimeFactor(num) {
  var i = 2;
  var divisor;
  while (!divisor) {
    if (num % i === 0 && isPrime(i)) {
      return i;
    }
    i++;
  }
}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

function getPrimeFactors(num) {
  var pfs = [];
  var sqrt = Math.sqrt(num);
  var primes = getPrimesLessThan(sqrt + 1);

  for (var i = 0; i < primes.length; i++) {
    if (num % primes[i] === 0) {
      pfs.push(primes[i]);
    }
  }

  return pfs;
}

function getLPF(num) {
  var start = new Date();
  var pfs = getPrimeFactors(num);
  var finish = new Date();
  console.log(finish - start);
  return pfs[pfs.length - 1];
}

getLPF(600851475143);


//////////////

// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

// Find the largest palindrome made from the product of two 3-digit numbers.

function isPalindrome(num) {
  return num === +(num.toString().split('').reverse().join('')) ? true : false;
}

function getProds() {
  var prod;
  var prods = [];
  for (var i = 999; i > 99; i--) {
    for (var j = 999; j > 99; j--) {
      prod = i * j;
      if (isPalindrome(prod)) {
        prods.push(prod);
      }
    }
  }
  return prods;
}

function findMax(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}


/////////////////
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

function getDatNum() {
  num = 20;
  while (true) {
    if (hasFactorsOneToTwenty(num)) {
      return num;
    }
    num++;
  }
}

function hasFactorsOneToTwenty(num) {
  for (var i = 2; i <= 20; i++) {
    if (num % i !== 0) {
      return false;
    }
  }
 return true;
}

//////////////
// The sum of the squares of the first ten natural numbers is,

// 12 + 22 + ... + 102 = 385
// The square of the sum of the first ten natural numbers is,

// (1 + 2 + ... + 10)2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

var sum = 0;
var sumOfSquares = 0;

for (var i = 1; i <= 100; i++) {
  sum += i;
  sumOfSquares += i * i;
}

var sumSquared = sum * sum;

console.log(sumOfSquares - sumSquared)

///////////
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

// What is the 10 001st prime number?


function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

function getPrimes() {
  var primes = [];
  var i = 2;
  while(primes.length < 10001) {
    if (isPrime(i)) {
      primes.push(i);
    }
    i++;
  }
  return primes[10000];
}
////////////////////
// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

var num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

var prods = [];
for (var i = 0; i < 999-13; i++) {
  prods.push(getProd(i, i+12));
}

function getProd(a, b) {
  var prod = 1;
  for (var i = a; i <= b; i++) {
    prod *= num[i];
  }
  return prod;
}

function findMax(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}

findMax(prods);

////////////////////
// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

// a2 + b2 = c2
// For example, 32 + 42 = 9 + 16 = 25 = 52.

// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.

function findSumTrips(num) {
  var trips = [];
  for (var i = 1; i < num-2; i++) {
    for (var j = 1; j < num-2; j++) {
      for (var k = 1; k < num-2; k++) {
        if (i + j + k === num && i*i + j*j === k*k) {
          trips.push([i,j,k]);
        }
      }
    }
  }
  return trips;
}

////////////////////
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

// Find the sum of all the primes below two million.

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

var sum = getPrimesLessThan(2000000).reduce(function(prev, curr) {
  return curr + prev;
});
console.log(sum);

/////////////////////
// In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

// The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

// What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?

var grid = ['08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08','49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00','81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65','52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91','22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80','24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50','32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70','67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21','24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72','21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95','78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92','16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57','86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58','19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40','04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66','88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69','04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36','20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16','20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54','01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'];
var newGrid = [];
var row;

for (var i = 0; i < grid.length; i++) {
  row = grid[i].split(' ');
  for (var j = 0; j < row.length; j++) {
    row[j] = +row[j];
  }
  newGrid.push(row);
}
console.log(newGrid);

function getHorizProd(rowInd, colInd) {
  var prod = 1;
  if (colInd < 17) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd][colInd + i];
    }
  }
  return prod;
}

function getDiag1Prod(rowInd, colInd) {
  var prod = 1;
  if (rowInd < 17 && colInd < 17) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd + i][colInd + i];
    }
  }
  return prod;
}

function getDiag2Prod(rowInd, colInd) {
  var prod = 1;
  if (rowInd < 17 && colInd > 3) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd + i][colInd - i];
    }
  }
  return prod;
}

function getVertProd(rowInd, colInd) {
  var prod = 1;
  if (rowInd < 17) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd + i][colInd];
    }
  }
  return prod;
}

function findMax(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}

function findDatProd() {
  var prods = [];
  for (var i = 0; i < newGrid.length; i++) {
    for (var j = 0; j < newGrid[i].length; j++) {
      prods.push(getHorizProd(i,j), getDiag1Prod(i,j), getDiag2Prod(i,j), getVertProd(i,j));
    }
  }
  console.log(prods);
  return findMax(prods);
}

////////////////////
// Highly divisible triangular number
// Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

function getNthTriNum(num) {
  var sum = 0;
  for (var i = 1; i <= num; i++) {
    sum += i;
  }
  return sum;
}

function getFactors(num) {
  var factors = [];
  for (var i = 1; i <= num; i++) {
    if (num % i === 0) {
      factors.push(i);
    }
  }
  // console.log(factors);
  return factors;
}

function getDatNum(minFactors) {
  var factors = 0;
  var tri = 1;
  var triNum, triFactors;
  while (factors <= minFactors) {
    triNum = getNthTriNum(tri);
    triFactors = getFactors(triNum);
    factors = triFactors.length;
    tri++;
  }
  console.log(tri);
  return triNum;
}

var start = new Date();
getDatNum(500);
var finish = new Date();
console.log(finish - start);


/////////////////////////
// Large sum
// Problem 13
// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

var nums = [
  '37107287533902102798797998220837590246510135740250',
  '46376937677490009712648124896970078050417018260538',
  '74324986199524741059474233309513058123726617309629',
  '91942213363574161572522430563301811072406154908250',
  '23067588207539346171171980310421047513778063246676',
  '89261670696623633820136378418383684178734361726757',
  '28112879812849979408065481931592621691275889832738',
  '44274228917432520321923589422876796487670272189318',
  '47451445736001306439091167216856844588711603153276',
  '70386486105843025439939619828917593665686757934951',
  '62176457141856560629502157223196586755079324193331',
  '64906352462741904929101432445813822663347944758178',
  '92575867718337217661963751590579239728245598838407',
  '58203565325359399008402633568948830189458628227828',
  '80181199384826282014278194139940567587151170094390',
  '35398664372827112653829987240784473053190104293586',
  '86515506006295864861532075273371959191420517255829',
  '71693888707715466499115593487603532921714970056938',
  '54370070576826684624621495650076471787294438377604',
  '53282654108756828443191190634694037855217779295145',
  '36123272525000296071075082563815656710885258350721',
  '45876576172410976447339110607218265236877223636045',
  '17423706905851860660448207621209813287860733969412',
  '81142660418086830619328460811191061556940512689692',
  '51934325451728388641918047049293215058642563049483',
  '62467221648435076201727918039944693004732956340691',
  '15732444386908125794514089057706229429197107928209',
  '55037687525678773091862540744969844508330393682126',
  '18336384825330154686196124348767681297534375946515',
  '80386287592878490201521685554828717201219257766954',
  '78182833757993103614740356856449095527097864797581',
  '16726320100436897842553539920931837441497806860984',
  '48403098129077791799088218795327364475675590848030',
  '87086987551392711854517078544161852424320693150332',
  '59959406895756536782107074926966537676326235447210',
  '69793950679652694742597709739166693763042633987085',
  '41052684708299085211399427365734116182760315001271',
  '65378607361501080857009149939512557028198746004375',
  '35829035317434717326932123578154982629742552737307',
  '94953759765105305946966067683156574377167401875275',
  '88902802571733229619176668713819931811048770190271',
  '25267680276078003013678680992525463401061632866526',
  '36270218540497705585629946580636237993140746255962',
  '24074486908231174977792365466257246923322810917141',
  '91430288197103288597806669760892938638285025333403',
  '34413065578016127815921815005561868836468420090470',
  '23053081172816430487623791969842487255036638784583',
  '11487696932154902810424020138335124462181441773470',
  '63783299490636259666498587618221225225512486764533',
  '67720186971698544312419572409913959008952310058822',
  '95548255300263520781532296796249481641953868218774',
  '76085327132285723110424803456124867697064507995236',
  '37774242535411291684276865538926205024910326572967',
  '23701913275725675285653248258265463092207058596522',
  '29798860272258331913126375147341994889534765745501',
  '18495701454879288984856827726077713721403798879715',
  '38298203783031473527721580348144513491373226651381',
  '34829543829199918180278916522431027392251122869539',
  '40957953066405232632538044100059654939159879593635',
  '29746152185502371307642255121183693803580388584903',
  '41698116222072977186158236678424689157993532961922',
  '62467957194401269043877107275048102390895523597457',
  '23189706772547915061505504953922979530901129967519',
  '86188088225875314529584099251203829009407770775672',
  '11306739708304724483816533873502340845647058077308',
  '82959174767140363198008187129011875491310547126581',
  '97623331044818386269515456334926366572897563400500',
  '42846280183517070527831839425882145521227251250327',
  '55121603546981200581762165212827652751691296897789',
  '32238195734329339946437501907836945765883352399886',
  '75506164965184775180738168837861091527357929701337',
  '62177842752192623401942399639168044983993173312731',
  '32924185707147349566916674687634660915035914677504',
  '99518671430235219628894890102423325116913619626622',
  '73267460800591547471830798392868535206946944540724',
  '76841822524674417161514036427982273348055556214818',
  '97142617910342598647204516893989422179826088076852',
  '87783646182799346313767754307809363333018982642090',
  '10848802521674670883215120185883543223812876952786',
  '71329612474782464538636993009049310363619763878039',
  '62184073572399794223406235393808339651327408011116',
  '66627891981488087797941876876144230030984490851411',
  '60661826293682836764744779239180335110989069790714',
  '85786944089552990653640447425576083659976645795096',
  '66024396409905389607120198219976047599490197230297',
  '64913982680032973156037120041377903785566085089252',
  '16730939319872750275468906903707539413042652315011',
  '94809377245048795150954100921645863754710598436791',
  '78639167021187492431995700641917969777599028300699',
  '15368713711936614952811305876380278410754449733078',
  '40789923115535562561142322423255033685442488917353',
  '44889911501440648020369068063960672322193204149535',
  '41503128880339536053299340368006977710650566631954',
  '81234880673210146739058568557934581403627822703280',
  '82616570773948327592232845941706525094512325230608',
  '22918802058777319719839450180888072429661980811197',
  '77158542502016545090413245809786882778948721859617',
  '72107838435069186155435662884062257473692284509516',
  '20849603980134001723930671666823555245252804609722',
  '53503534226472524250874054075591789781264330331690'
];

var newNums = nums.map(function(num) {
  return +(num.slice(0, 10));
});
console.log(newNums);

var ans = newNums.reduce(function(prev, curr) {
  return prev + curr;
});
console.log(ans);

var final = ans.toPrecision(10);
console.log(final);

///////////////////
// Longest Collatz sequence
// Problem 14
// The following iterative sequence is defined for the set of positive integers:

// n → n/2 (n is even)
// n → 3n + 1 (n is odd)

// Using the rule above and starting with 13, we generate the following sequence:

// 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

// Which starting number, under one million, produces the longest chain?

// NOTE: Once the chain starts the terms are allowed to go above one million.

function getCollatz(num) {
  var arr = [num];
  while (arr[arr.length-1] !== 1) {
    if (num % 2 === 0) {
      num = num / 2;
      arr.push(num);
    } else {
      num = (3 * num) + 1;
      arr.push(num);
    }
  }
  return arr;
}


// function getCollatz(num) {
//   var arr = [num];
//   while (arr[arr.length-1] !== 1) {
//     if (cache[num]) {
//       return arr.concat(cache[num]);
//     }
//     if (num % 2 === 0) {
//       num = num / 2;
//       arr.push(num);
//     } else {
//       num = (3 * num) + 1;
//       arr.push(num);
//     }
//   }
//   cache[num] = arr;
//   return arr
// }

//caching?

// {
//   1: [],
//   2: [1],
//   3: [10,5,16,8,4,2,1],
//   4: [2,1],
//   5: [16,8,4,2,1]
// }

var cache = {};

function getNextNum(num) {
  if (cache[num]) {
    return cache[num];
  }
  cache[num] = num % 2 === 0 ? num / 2 : (3 * num) + 1;
  return cache[num];
}



//for num 1 to 1000000:
// 1. if num answer seq. length cached, return currentLength + seqLengths[num]
// 2. else get next num, curentLength++.
// repeat 1 and 2 until next num is 1
// if arr.length > longestChain.len,
//   longestChain = {num: num, len: arr.length}

var start = new Date();
var num, currLength;
var seqLengths = {1: 1};
var longestChain = {num: 1, len: 1};
var count = 0;

for (var i = 2; i < 1000000; i++) {
  currLength = 0;
  getChain(i);
  seqLengths[i] = currLength;
  if (currLength > longestChain.len) {
    longestChain = {num: i, len: currLength};
  }
}
var finish = new Date();
console.log('time elapsed: ' + (finish - start) + 'ms');
console.log('count: ' + count);
console.log('longestChain: ', longestChain);

function getChain(num) {
  count++;
  if (seqLengths[num]) {
    currLength += seqLengths[num];
    return;
  } else if (num === 1) {
    return;
  } else {
    currLength++;
    num = num % 2 === 0 ? num / 2 : (3 * num) + 1;
    return getChain(num);
  }
}
// (chrome)
// time elapsed: 7398ms
// count: 6226257
// longestChain:  Object {num: 837799, len: 525}
//////////////////////////////

// Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down,
// there are exactly 6 routes to the bottom right corner.

// How many such routes are there through a 20×20 grid?

function pickPath() {

  var r = 0;
  var c = 0;
  var paths = [
    [r,r,c,c],
    [r,c,r,c],
    [r,c,c,r],
    [c,r,r,c],
    [c,r,c,r],
    [c,c,r,r]
  ];

  // in how many different orders can you add together n numbers from 2 sets?

}

function getRandPath(gridSize) {
  var r = 0;
  var d = 0;
  var path = [];
  while (path.length < 2 * gridSize) {
    if (Math.round(Math.random())) {
      if (r < gridSize) {
        path.push('r');
        r++;
      } else {
        path.push('d');
        d++;
      }
    } else {
      if (d < gridSize) {
        path.push('d');
        d++;
      } else {
        path.push('r');
        r++;
      }
    }
  }
  return path.join('');
}

var paths = {};
for (var i = 0; i < 100000; i++) {
  var p = getRandPath(6);
  paths[p] = paths[p] + 1 || 1;
}

//this isn't good enough for 20x20.

// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .

// top left is 0,0
// when at 19,19 there are two ways of getting to 20,20 - r,d and d,r



// ['rrrrrrrrrrdddddddddd',...,'ddddddddddrrrrrrrrrr']
// 2^20



//////////////////////
// Power digit sum
// Problem 16
// 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

// What is the sum of the digits of the number 2^1000?

function sumDigits(power) {
  var num = Math.pow(2, power);
  var arr = num.toString().split('');
  var sum = arr.reduce(function(prev, curr) {
    return +prev + +curr
  });
  return sum;
}

function multiplyBy2(numStr) {
  var digitX2;
  var carry = 0;
  var numArr = numStr.split('');
  var prodArr = [];
  for (var i = numArr.length-1; i >= 0; i--) {
    digitX2 = (numArr[i] * 2).toString();
    if (i === 0) {
      prodArr.unshift(+digitX2 + carry);
    } else if (digitX2.length === 2) {
      prodArr.unshift(+digitX2[1] + carry);
      carry = +digitX2[0];
    } else {
      prodArr.unshift(+digitX2[0] + carry);
      carry = 0;
    }
  }
  return prodArr.join('');
}

function powersOf2(numPowers) {
  var currNum = "2";
  for (var i = 0; i < numPowers-1; i++) {
    currNum = multiplyBy2(currNum);
  }
  return currNum;
}


var bigNumArr = powersOf2(1000).split('');

var ans = bigNumArr.reduce(function(prev, curr) {
  return +prev + +curr
});
console.log(ans);

//////////////////////////

// Number letter counts
// Problem 17
// If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are
// 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

// If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters
// would be used?

// NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters
// and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in
// compliance with British usage.




function spellNum(num) {

  var basic = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
  var teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  var tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

  var numStr = num.toString();
  var temp;

  if (numStr.length === 3) {
    if (+numStr[1] === 1) {
      temp = teens[+numStr[2]];
    } else {
      if (+numStr[1] === 0) {

        if (+numStr[2] === 0) {
          return basic[+numStr[0]-1] + ' hundred';
        } else {
          return basic[+numStr[0]-1] + ' hundred and ' + basic[+numStr[2]-1];
        }
      }
      temp = +numStr[2] === 0 ? '' : '-' + basic[+numStr[2]-1];
      temp = tens[+numStr[1]-2] + temp;
    }
    return basic[+numStr[0]-1] + ' hundred and ' + temp;
  } else if (numStr.length === 2) {
    if (num < 20) {
      return teens[num-10];
    } else {
      temp = +numStr[1] === 0 ? '' : '-' + basic[+numStr[1]-1];
      return tens[+numStr[0]-2] + temp;
    }
  } else if (numStr.length === 1) {
    return basic[num-1];
  } else {
    return "one thousand";
  }

}


function spellNum2(num) {

  var basic = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
  var teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  var tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

  var numStr = num.toString();
  var temp;

  if (numStr.length === 3) {
    if (+numStr[1] === 1) {
      temp = teens[+numStr[2]];
    } else {
      if (+numStr[1] === 0) {

        if (+numStr[2] === 0) {
          return basic[+numStr[0]-1] + 'hundred';
        } else {
          return basic[+numStr[0]-1] + 'hundredand' + basic[+numStr[2]-1];
        }
      }
      temp = +numStr[2] === 0 ? '' : basic[+numStr[2]-1];
      temp = tens[+numStr[1]-2] + temp;
    }
    return basic[+numStr[0]-1] + 'hundredand' + temp;
  } else if (numStr.length === 2) {
    if (num < 20) {
      return teens[num-10];
    } else {
      temp = +numStr[1] === 0 ? '' : basic[+numStr[1]-1];
      return tens[+numStr[0]-2] + temp;
    }
  } else if (numStr.length === 1) {
    return basic[num-1];
  } else {
    return "onethousand";
  }

}

var ansArr = [];
for (var i = 1; i <= 1000; i++) {
  ansArr.push(spellNum2(i));
}
console.log(ansArr.join('').length);

///////////////////////


                            75
                          95 64
                        17 47 82
                      18 35 87 10
                    20 04 82 47 65
                  19 01 23 75 03 34
                88 02 77 73 07 63 67
              99 65 04 28 06 16 70 92
            41 41 26 56 83 40 80 70 33
          41 48 72 33 47 32 37 16 94 29
        53 71 44 65 25 43 91 52 97 51 14
      70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
  63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

// var nums = ['75','95 64','17 47 82','18 35 87 10','20 04 82 47 65','19 01 23 75 03 34','88 02 77 73 07 63 67','99 65 04 28 06 16 70 92','41 41 26 56 83 40 80 70 33','41 48 72 33 47 32 37 16 94 29','53 71 44 65 25 43 91 52 97 51 14','70 11 33 28 77 73 17 78 39 68 17 57','91 71 52 38 17 14 91 43 58 50 27 29 48','63 66 04 68 89 53 67 30 73 16 69 87 40 31','04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'];


function pickPath() {
  var nums = [[75],[95,64],[17,47,82],[18,35,87,10],[20,04,82,47,65],[19,01,23,75,03,34],[88,02,77,73,07,63,67],[99,65,04,28,06,16,70,92],[41,41,26,56,83,40,80,70,33],[41,48,72,33,47,32,37,16,94,29],[53,71,44,65,25,43,91,52,97,51,14],[70,11,33,28,77,73,17,78,39,68,17,57],[91,71,52,38,17,14,91,43,58,50,27,29,48],[63,66,04,68,89,53,67,30,73,16,69,87,40,31],[04,62,98,27,23,09,70,98,73,93,38,53,60,04,23]];
  var path = [{
      index: 0,
      number: 75
    }];

  for (var i = 1; i < nums.length; i++) {
    prevIndex = path[i-1].index;
    if (Math.round(Math.random())) {
      path.push({
        index: prevIndex,
        number: nums[i][prevIndex]
      });
    } else {
      path.push({
        index: prevIndex + 1,
        number: nums[i][prevIndex+1]
      });
      prevIndex++;
    }
  }
  // console.log(path);
  return path.reduce(function(prev, curr) {
    // console.log(prev, curr);
    return prev + curr.number;
  }, 0);
}
var highest = 0;
for (var i = 0; i < 100000; i++) {
  sum = pickPath();
  highest = sum > highest ? sum : highest;
}

console.log(highest);


////////////////////

// Factorial digit sum
// Problem 20
// n! means n × (n − 1) × ... × 3 × 2 × 1

// For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
// and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

// Find the sum of the digits in the number 100!

function getFact(num) {
  var prod = num;

  for (var i = num-1; i > 0; i--) {
    prod = multiply(prod.toString(), i);
  }
  return prod;
}

// getFact(100)
// 9.332621544394418e+157

function getFact(num) {
  var prod = num.toString();
  while (num > 1) {
    return multiply(prod, getFact(num-1));
  }
  return prod;
}

function multiply(numStr1, num2) {

  var digitMultd;
  var carry = 0;
  var prodArr = [];
  var numsToSum = [];
  var num, numArr;
  for (var i = numStr1.length-1; i >= 0; i--) {
    num = (numStr1[i] * num2).toString();
    numArr = num.split('');
    for (var j = 0; j < numStr1.length-1-i; j++) {
      numArr.push('0');
    }
    num = numArr.join('');
    numsToSum.push(num);
  }
  console.log(numsToSum);
  return numsToSum.reduce(function(prev, curr) {
    return add(prev, curr);
  }, '0');

}

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  console.log(sumArr);
  return sumArr.join('');
}

function sumDigits(numStr) {
  var arr = numStr.split('');
  var sum = arr.reduce(function(prev, curr) {
    return +prev + +curr
  });
  return sum;
}
//"93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"

///////////////////

// Counting Sundays
// Problem 19
// You are given the following information, but you may prefer to do some research for yourself.

// 1 Jan 1900 was a Monday.
// Thirty days has September,
// April, June and November.
// All the rest have thirty-one,
// Saving February alone,
// Which has twenty-eight, rain or shine.
// And on leap years, twenty-nine.
// A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
// How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

function isLeapYear(year) {
  if (year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)) {
    return true;
  }
  return false;
}

function daysSince1899(year, month) {
  var daysSince1899 = 1;

  for (var i = 1900; i < year; i++) {
    daysSince1899 += isLeapYear(i) ? 366 : 365;
  }

  var months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  months[1] = isLeapYear(year) ? 29 : 28;

  for (var j = 0; j < month-1; j++) {
    daysSince1899 += months[j];
  }

  return daysSince1899;
}

var sundays = 0;

for (var i = 1901; i < 2001; i++) {
  for (var j = 1; j <= 12; j++) {
    if (daysSince1899(i, j) % 7 === 0) {
      sundays++;
    }
  }
}

/////////////
// Amicable numbers
// Problem 21
// Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
// If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

// For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

// Evaluate the sum of all the amicable numbers under 10000.

function getProperDivisors(num) {
  var factors = [];
  for (var i = 1; i < num; i++) {
    if (num % i === 0) {
      factors.push(i);
    }
  }
  return factors;
}

function findAmicableNums () {
  var factors, pair, pairFactors;
  var amiNums = [];
  for (var i = 1; i < 10000; i++) {
    if (amiNums.indexOf(i) !== -1) {
      continue;
    }
    factors = getProperDivisors(i);
    pair = factors.reduce(function(prev, curr) {
      return prev + curr;
    }, 0);
    pairFactors = getProperDivisors(pair);
    pairSum = pairFactors.reduce(function(prev, curr) {
      return prev + curr;
    }, 0);
    if (i === pairSum && i !== pair) {
      amiNums.push(i, pair);
    }
  }
  return amiNums;
}

///////////////

// Names scores
// Problem 22
// Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names,
// begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value
// by its alphabetical position in the list to obtain a name score.

// For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53,
// is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.

// What is the total of all the name scores in the file?


function slowSort (arr) {
  var start = Date.now();
  var sorted = arr.sort();
  var finish = Date.now();
  console.log("Elapsed time: " + (finish - start)/1000 + "ms");
  return sorted;
}

function getNameValue(name) {
  var abc = 'abcdefghijklmnopqrstuvwxyz';
  var nameValue = 0;
  for (var i = 0; i < name.length; i++) {
    nameValue += abc.indexOf(name[i].toLowerCase()) + 1
  }
  return nameValue;
}

function getScoreSum() {
  var sortedNames = names.sort();
  var totalScore = 0;
  for (var i = 0; i < sortedNames.length; i++) {
    totalScore += getNameValue(sortedNames[i]) * (i+1)
  }
  return totalScore;
}

//////////////////////////

// Non-abundant sums
// Problem 23
// A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example,
// the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

// A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum
// exceeds n.

// As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of
// two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be
// written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even
// though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than
// this limit.

// Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.

function getProperDivisors(num) {
  var factors = [];
  for (var i = 1; i < num; i++) {
    if (num % i === 0) {
      factors.push(i);
    }
  }
  return factors;
}

function isAbundant(num) {
  var factors = getProperDivisors(num);
  var sum = factors.reduce(function(prev, curr) {
    return prev + curr;
  }, 0);
  return sum > num ? true : false;
}



function findUnsummables() {
  var nums = [];
  var unSummableNums = [];
  var neededNum;

  top:
  for (var i = 1; i <= 30000; i++) {
    if (isAbundant(i)) {
      nums.push(i);
    }

    for (var j = 0; j < nums.length; j++) {
      neededNum = i - nums[j];
      if (nums.indexOf(neededNum) !== -1) {
        continue top;
      }
    }
    unSummableNums.push(i);
  }
  return unSummableNums;
}

/////////////////////

// Lexicographic permutations
// Problem 24
// A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the
// digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it
// lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

// 012   021   102   120   201   210

// What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

// 0123456 789, 0123456 798,
// 0123456 879, 0123456 897,
// 0123456 978, 0123456 987
// ...
// 9876543210
var nums = ['0123456789'];
var last = '0123456789';

while (nums.length < 1000000) {
  last.split('')
}

// last digit++ until its the highest
// next to last++ until the same, with the last being the next to highest
// 01234...01243...01432...04321...43210
// each stage has more steps inbetween as more digits are being shuffled
// 01234...
// 01243...01324...01342...01423...
// 01432...
// 04321...
// 43210


function getPermsBrute() {
  var num;
  var nums = [];
  for (var i = 12345; i < 543210; i++) { // no. 9876 included
    num = addZeros(i, 4);
    if (!hasDupeDigit(num)) {
      nums.push(num);
    }
  }
  return nums.sort();
}

function hasDupeDigit(num) {
  var str = num.toString();
  for (var i = 0; i < str.length; i++) {
    for (var j = 0; j < str.length; j++) {
      if (i !== j && str[i] === str[j]) {
        return true;
      }
    }
  }
  return false;
}

function addZeros(num, length) {
  var arr = num.toString().split('');
  while (arr.length < length) {
    arr.unshift("0");
  }
  return arr.join('');
}



var str = '543210';
//something recursive..

// 012345, 012354, 012534, 015234, 051234, 501234 <-- send one digit over
// 501243, 501423, 504123, 540123, 450123
// 450132, 450312, 453012, 435012, 345012,
// 345021, 345201, 342501, 324501, 234501....



//////////////

// 1000-digit Fibonacci number
// Problem 25

// The Fibonacci sequence is defined by the recurrence relation:

// Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
// Hence the first 12 terms will be:

// F1 = 1
// F2 = 1
// F3 = 2
// F4 = 3
// F5 = 5
// F6 = 8
// F7 = 13
// F8 = 21
// F9 = 34
// F10 = 55
// F11 = 89
// F12 = 144
// The 12th term, F12, is the first term to contain three digits.

// What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  console.log(sumArr);
  return sumArr.join('');
}

var cache = ['wat', "1", "1"];

function fib(num) {
  if (cache[num]) {
    return cache[num];
  }
  cache[num] = add(fib(num-1), fib(num-2));
  return cache[num];
}

function findDatNum() {
  var fibIndex = 1;
  while (fib(fibIndex).length < 1000) {
    fibIndex++;
  }
  return fibIndex;
}

/////////////////////////

// Reciprocal cycles
// Problem 26
// A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

// 1/2 =   0.5
// 1/3 =   0.(3)
// 1/4 =   0.25
// 1/5 =   0.2
// 1/6 =   0.1(6)
// 1/7 =   0.(142857)
// 1/8 =   0.125
// 1/9 =   0.(1)
// 1/10  =   0.1
// Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.

// Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.

function unitFrac(num) {
  return 1 / num;
}

function divide(numerStr, denomNum) {

  var numerArr = numerStr.split('');
  var quotArr = [];
  var i = 0;
  var remainArr;
  var currNumer = numerArr[0];
  var tempArr = [];

  while (remainder !== 0 || i < 100) {

    if (currNumer % denomNum === 0) {
      quotArr.push((numerArr[i] / denomNum).toString());
      remainder = 0;
    } else {
      quotArr.push(Math.floor(numerArr[i] / denomNum));
      remainArr = (numerArr[i] % denomNum).toString().split('');
      remainArr.push('0');
    }

    i++;
  }

}

// divide('20', '5') -> '4'


////////////////////////////

// Quadratic primes
// Problem 27
// Euler discovered the remarkable quadratic formula:

// n² + n + 41

// It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40,
// 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.

// The incredible formula  n² − 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79.
// The product of the coefficients, −79 and 1601, is −126479.

// Considering quadratics of the form:

// n² + an + b, where |a| < 1000 and |b| < 1000

// where |n| is the modulus/absolute value of n
// e.g. |11| = 11 and |−4| = 4
// Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes
// for consecutive values of n, starting with n = 0.

var primes = [];
var results = {};
var result;
var allPrimes = true;
var n = 0;
var best = {
  a: null,
  b: null,
  primes: 0
};

function isPrime(num) {
  if (num <= 1) {
    return false;
  }

  if (primes.indexOf(num) !== -1) {
    return true;
  }

  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
  }
  primes.push(num);
  return true;
}

for (var a = -999; a < 1000; a++) {
  results[a] = {};
  for (var b = -999; b < 1000; b++) {
    results[a][b] = 0;
    while (allPrimes) {
      result = (n * n) + (a * n) + b;
      if (isPrime(result)) {
        results[a][b]++;
        n++;
      } else {
        allPrimes = false;
        n = 0;
        if (results[a][b] > best.primes) {
          best = {
            a: a,
            b: b,
            primes: results[a][b]
          }
        }
      }
    }
    allPrimes = true;
  }
}
console.log(best);


//////////////////////////

// Number spiral diagonals
// Problem 28
// Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:

// 21 22 23 24 25
// 20  7  8  9 10
// 19  6  1  2 11
// 18  5  4  3 12
// 17 16 15 14 13

// It can be verified that the sum of the numbers on the diagonals is 101.

// What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

// 43 44 45 46 47 48 49
// 42 21 22 23 24 25 26
// 41 20  7  8  9 10 27
// 40 19  6  1  2 11 28
// 39 18  5  4  3 12 29
// 38 17 16 15 14 13 30
// 37 36 35 34 33 32 31

// 0, 2, 2, 2, 2, 4, 4, 4, 4, 6, 6, 6, 6... -> 1002001
function spiralDiags(size) {
  var quad = 4;
  var inc = 0;
  var i = 1;
  var sum = 0;
  var maxNum = size * size;

  while (i <= maxNum) {
    console.log(i);
    sum += i;
    if (quad === 4) {
      quad = 1;
      inc += 2;
    } else {
      quad++;
    }
    i += inc;
  }
  return sum;
}

//////////////////////////

// Distinct powers
// Problem 29
// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 22=4, 23=8, 24=16, 25=32
// 32=9, 33=27, 34=81, 35=243
// 42=16, 43=64, 44=256, 45=1024
// 52=25, 53=125, 54=625, 55=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

function distinctPowers (aMin, aMax, bMin, bMax) {
  var arr = [];
  var numStr;
  for (var a = aMin; a <= aMax; a++) {
    for (var b = bMin; b <= bMax; b++) {
      numStr = power(a, b);
      if (arr.indexOf(numStr) === -1) {
        arr.push(numStr);
      }
    }
  }
  return arr.length;
}

function power (base, exp) {
  var prod = '1';

  for (var i = 0; i < exp; i++) {
    prod = multiply(prod, base)
  }
  return prod;
}

function multiply (numStr1, num2) {

  var digitMultd;
  var carry = 0;
  var prodArr = [];
  var numsToSum = [];
  var num, numArr;
  for (var i = numStr1.length-1; i >= 0; i--) {
    num = (numStr1[i] * num2).toString();
    numArr = num.split('');
    for (var j = 0; j < numStr1.length-1-i; j++) {
      numArr.push('0');
    }
    num = numArr.join('');
    numsToSum.push(num);
  }
  // console.log(numsToSum);
  return numsToSum.reduce(function(prev, curr) {
    return add(prev, curr);
  }, '0');

}

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  // console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  // console.log(sumArr);
  return sumArr.join('');
}

///////////////////////////////

// Digit fifth powers
// Problem 30
// Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

// 1634 = 14 + 64 + 34 + 44
// 8208 = 84 + 24 + 04 + 84
// 9474 = 94 + 44 + 74 + 44
// As 1 = 14 is not a sum it is not included.

// The sum of these numbers is 1634 + 8208 + 9474 = 19316.

// Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.


