// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

var sum = 0;
for (var i = 1; i < 1000; i++) {
  if (i % 3 === 0 || i % 5 ===0) {
    sum += i;
  }
}
console.log(sum);

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

var fib = [1,2];
var curr, prev;
var sum = 0;

while (true) {

  curr = fib[fib.length - 1];
  prev = fib[fib.length - 2];

  if (curr % 2 === 0) {
    if (curr <= 4000000) {
      sum += curr;
    } else {
      break;
    }
  }

  fib.push(curr + prev);

}

console.log(sum);

// The prime factors of 13195 are 5, 7, 13 and 29.

// What is the largest prime factor of the number 600851475143 ?

// function isPrime(num) {  // Lol. As I grow old...
//   for (var i = num-1; i > 1; i--) {
//     if (num % i === 0) {
//       return false;
//     }
//   }
//   return true;
// }


// function getSmallestFactor(num) { //cool. not necessary here.
//   var i = 2;
//   var divisor;
//   while (!divisor) {
//     if (num % i === 0) {
//       return i;
//     }
//     i++;
//   }
// }

function getSmallestPrimeFactor(num) {
  var i = 2;
  var divisor;
  while (!divisor) {
    if (num % i === 0 && isPrime(i)) {
      return i;
    }
    i++;
  }
}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

function getPrimeFactors(num) {
  var pfs = [];
  var sqrt = Math.sqrt(num);
  var primes = getPrimesLessThan(sqrt + 1);

  for (var i = 0; i < primes.length; i++) {
    if (num % primes[i] === 0) {
      pfs.push(primes[i]);
    }
  }

  return pfs;
}

function getLPF(num) {
  var start = new Date();
  var pfs = getPrimeFactors(num);
  var finish = new Date();
  console.log(finish - start);
  return pfs[pfs.length - 1];
}

getLPF(600851475143);


//////////////

// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

// Find the largest palindrome made from the product of two 3-digit numbers.

function isPalindrome(num) {
  return num === +(num.toString().split('').reverse().join('')) ? true : false;
}

function getProds() {
  var prod;
  var prods = [];
  for (var i = 999; i > 99; i--) {
    for (var j = 999; j > 99; j--) {
      prod = i * j;
      if (isPalindrome(prod)) {
        prods.push(prod);
      }
    }
  }
  return prods;
}

function findMax(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}


/////////////////
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

function getDatNum() {
  num = 20;
  while (true) {
    if (hasFactorsOneToTwenty(num)) {
      return num;
    }
    num++;
  }
}

function hasFactorsOneToTwenty(num) {
  for (var i = 2; i <= 20; i++) {
    if (num % i !== 0) {
      return false;
    }
  }
 return true;
}

//////////////
// The sum of the squares of the first ten natural numbers is,

// 12 + 22 + ... + 102 = 385
// The square of the sum of the first ten natural numbers is,

// (1 + 2 + ... + 10)2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

var sum = 0;
var sumOfSquares = 0;

for (var i = 1; i <= 100; i++) {
  sum += i;
  sumOfSquares += i * i;
}

var sumSquared = sum * sum;

console.log(sumOfSquares - sumSquared)

///////////
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

// What is the 10 001st prime number?


function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

function getPrimes() {
  var primes = [];
  var i = 2;
  while(primes.length < 10001) {
    if (isPrime(i)) {
      primes.push(i);
    }
    i++;
  }
  return primes[10000];
}
////////////////////
// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

var num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

var prods = [];
for (var i = 0; i < 999-13; i++) {
  prods.push(getProd(i, i+12));
}

function getProd(a, b) {
  var prod = 1;
  for (var i = a; i <= b; i++) {
    prod *= num[i];
  }
  return prod;
}

function findMax(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}

findMax(prods);

////////////////////
// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

// a2 + b2 = c2
// For example, 32 + 42 = 9 + 16 = 25 = 52.

// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.

function findSumTrips(num) {
  var trips = [];
  for (var i = 1; i < num-2; i++) {
    for (var j = 1; j < num-2; j++) {
      for (var k = 1; k < num-2; k++) {
        if (i + j + k === num && i*i + j*j === k*k) {
          trips.push([i,j,k]);
        }
      }
    }
  }
  return trips;
}

////////////////////
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

// Find the sum of all the primes below two million.

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

var sum = getPrimesLessThan(2000000).reduce(function(prev, curr) {
  return curr + prev;
});
console.log(sum);

/////////////////////
// In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

// The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

// What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?

var grid = ['08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08','49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00','81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65','52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91','22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80','24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50','32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70','67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21','24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72','21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95','78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92','16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57','86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58','19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40','04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66','88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69','04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36','20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16','20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54','01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'];
var newGrid = [];
var row;

for (var i = 0; i < grid.length; i++) {
  row = grid[i].split(' ');
  for (var j = 0; j < row.length; j++) {
    row[j] = +row[j];
  }
  newGrid.push(row);
}
console.log(newGrid);

function getHorizProd(rowInd, colInd) {
  var prod = 1;
  if (colInd < 17) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd][colInd + i];
    }
  }
  return prod;
}

function getDiag1Prod(rowInd, colInd) {
  var prod = 1;
  if (rowInd < 17 && colInd < 17) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd + i][colInd + i];
    }
  }
  return prod;
}

function getDiag2Prod(rowInd, colInd) {
  var prod = 1;
  if (rowInd < 17 && colInd > 3) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd + i][colInd - i];
    }
  }
  return prod;
}

function getVertProd(rowInd, colInd) {
  var prod = 1;
  if (rowInd < 17) {
    for (var i = 0; i < 4; i++) {
      prod *= newGrid[rowInd + i][colInd];
    }
  }
  return prod;
}

function findMax(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}

function findDatProd() {
  var prods = [];
  for (var i = 0; i < newGrid.length; i++) {
    for (var j = 0; j < newGrid[i].length; j++) {
      prods.push(getHorizProd(i,j), getDiag1Prod(i,j), getDiag2Prod(i,j), getVertProd(i,j));
    }
  }
  console.log(prods);
  return findMax(prods);
}

////////////////////
// Highly divisible triangular number
// Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

function getNthTriNum(num) {
  var sum = 0;
  for (var i = 1; i <= num; i++) {
    sum += i;
  }
  return sum;
}

function getFactors(num) {
  var factors = [];
  for (var i = 1; i <= num; i++) {
    if (num % i === 0) {
      factors.push(i);
    }
  }
  // console.log(factors);
  return factors;
}

function getDatNum(minFactors) {
  var factors = 0;
  var tri = 1;
  var triNum, triFactors;
  while (factors <= minFactors) {
    triNum = getNthTriNum(tri);
    triFactors = getFactors(triNum);
    factors = triFactors.length;
    tri++;
  }
  console.log(tri);
  return triNum;
}

var start = new Date();
getDatNum(500);
var finish = new Date();
console.log(finish - start);


/////////////////////////
// Large sum
// Problem 13
// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

var nums = [
  '37107287533902102798797998220837590246510135740250',
  '46376937677490009712648124896970078050417018260538',
  '74324986199524741059474233309513058123726617309629',
  '91942213363574161572522430563301811072406154908250',
  '23067588207539346171171980310421047513778063246676',
  '89261670696623633820136378418383684178734361726757',
  '28112879812849979408065481931592621691275889832738',
  '44274228917432520321923589422876796487670272189318',
  '47451445736001306439091167216856844588711603153276',
  '70386486105843025439939619828917593665686757934951',
  '62176457141856560629502157223196586755079324193331',
  '64906352462741904929101432445813822663347944758178',
  '92575867718337217661963751590579239728245598838407',
  '58203565325359399008402633568948830189458628227828',
  '80181199384826282014278194139940567587151170094390',
  '35398664372827112653829987240784473053190104293586',
  '86515506006295864861532075273371959191420517255829',
  '71693888707715466499115593487603532921714970056938',
  '54370070576826684624621495650076471787294438377604',
  '53282654108756828443191190634694037855217779295145',
  '36123272525000296071075082563815656710885258350721',
  '45876576172410976447339110607218265236877223636045',
  '17423706905851860660448207621209813287860733969412',
  '81142660418086830619328460811191061556940512689692',
  '51934325451728388641918047049293215058642563049483',
  '62467221648435076201727918039944693004732956340691',
  '15732444386908125794514089057706229429197107928209',
  '55037687525678773091862540744969844508330393682126',
  '18336384825330154686196124348767681297534375946515',
  '80386287592878490201521685554828717201219257766954',
  '78182833757993103614740356856449095527097864797581',
  '16726320100436897842553539920931837441497806860984',
  '48403098129077791799088218795327364475675590848030',
  '87086987551392711854517078544161852424320693150332',
  '59959406895756536782107074926966537676326235447210',
  '69793950679652694742597709739166693763042633987085',
  '41052684708299085211399427365734116182760315001271',
  '65378607361501080857009149939512557028198746004375',
  '35829035317434717326932123578154982629742552737307',
  '94953759765105305946966067683156574377167401875275',
  '88902802571733229619176668713819931811048770190271',
  '25267680276078003013678680992525463401061632866526',
  '36270218540497705585629946580636237993140746255962',
  '24074486908231174977792365466257246923322810917141',
  '91430288197103288597806669760892938638285025333403',
  '34413065578016127815921815005561868836468420090470',
  '23053081172816430487623791969842487255036638784583',
  '11487696932154902810424020138335124462181441773470',
  '63783299490636259666498587618221225225512486764533',
  '67720186971698544312419572409913959008952310058822',
  '95548255300263520781532296796249481641953868218774',
  '76085327132285723110424803456124867697064507995236',
  '37774242535411291684276865538926205024910326572967',
  '23701913275725675285653248258265463092207058596522',
  '29798860272258331913126375147341994889534765745501',
  '18495701454879288984856827726077713721403798879715',
  '38298203783031473527721580348144513491373226651381',
  '34829543829199918180278916522431027392251122869539',
  '40957953066405232632538044100059654939159879593635',
  '29746152185502371307642255121183693803580388584903',
  '41698116222072977186158236678424689157993532961922',
  '62467957194401269043877107275048102390895523597457',
  '23189706772547915061505504953922979530901129967519',
  '86188088225875314529584099251203829009407770775672',
  '11306739708304724483816533873502340845647058077308',
  '82959174767140363198008187129011875491310547126581',
  '97623331044818386269515456334926366572897563400500',
  '42846280183517070527831839425882145521227251250327',
  '55121603546981200581762165212827652751691296897789',
  '32238195734329339946437501907836945765883352399886',
  '75506164965184775180738168837861091527357929701337',
  '62177842752192623401942399639168044983993173312731',
  '32924185707147349566916674687634660915035914677504',
  '99518671430235219628894890102423325116913619626622',
  '73267460800591547471830798392868535206946944540724',
  '76841822524674417161514036427982273348055556214818',
  '97142617910342598647204516893989422179826088076852',
  '87783646182799346313767754307809363333018982642090',
  '10848802521674670883215120185883543223812876952786',
  '71329612474782464538636993009049310363619763878039',
  '62184073572399794223406235393808339651327408011116',
  '66627891981488087797941876876144230030984490851411',
  '60661826293682836764744779239180335110989069790714',
  '85786944089552990653640447425576083659976645795096',
  '66024396409905389607120198219976047599490197230297',
  '64913982680032973156037120041377903785566085089252',
  '16730939319872750275468906903707539413042652315011',
  '94809377245048795150954100921645863754710598436791',
  '78639167021187492431995700641917969777599028300699',
  '15368713711936614952811305876380278410754449733078',
  '40789923115535562561142322423255033685442488917353',
  '44889911501440648020369068063960672322193204149535',
  '41503128880339536053299340368006977710650566631954',
  '81234880673210146739058568557934581403627822703280',
  '82616570773948327592232845941706525094512325230608',
  '22918802058777319719839450180888072429661980811197',
  '77158542502016545090413245809786882778948721859617',
  '72107838435069186155435662884062257473692284509516',
  '20849603980134001723930671666823555245252804609722',
  '53503534226472524250874054075591789781264330331690'
];

var newNums = nums.map(function(num) {
  return +(num.slice(0, 10));
});
console.log(newNums);

var ans = newNums.reduce(function(prev, curr) {
  return prev + curr;
});
console.log(ans);

var final = ans.toPrecision(10);
console.log(final);

///////////////////
// Longest Collatz sequence
// Problem 14
// The following iterative sequence is defined for the set of positive integers:

// n → n/2 (n is even)
// n → 3n + 1 (n is odd)

// Using the rule above and starting with 13, we generate the following sequence:

// 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

// Which starting number, under one million, produces the longest chain?

// NOTE: Once the chain starts the terms are allowed to go above one million.

function getCollatz(num) {
  var arr = [num];
  while (arr[arr.length-1] !== 1) {
    if (num % 2 === 0) {
      num = num / 2;
      arr.push(num);
    } else {
      num = (3 * num) + 1;
      arr.push(num);
    }
  }
  return arr;
}


// function getCollatz(num) {
//   var arr = [num];
//   while (arr[arr.length-1] !== 1) {
//     if (cache[num]) {
//       return arr.concat(cache[num]);
//     }
//     if (num % 2 === 0) {
//       num = num / 2;
//       arr.push(num);
//     } else {
//       num = (3 * num) + 1;
//       arr.push(num);
//     }
//   }
//   cache[num] = arr;
//   return arr
// }

//caching?

// {
//   1: [],
//   2: [1],
//   3: [10,5,16,8,4,2,1],
//   4: [2,1],
//   5: [16,8,4,2,1]
// }

var cache = {};

function getNextNum(num) {
  if (cache[num]) {
    return cache[num];
  }
  cache[num] = num % 2 === 0 ? num / 2 : (3 * num) + 1;
  return cache[num];
}



//for num 1 to 1000000:
// 1. if num answer seq. length cached, return currentLength + seqLengths[num]
// 2. else get next num, curentLength++.
// repeat 1 and 2 until next num is 1
// if arr.length > longestChain.len,
//   longestChain = {num: num, len: arr.length}

var start = new Date();
var num, currLength;
var seqLengths = {1: 1};
var longestChain = {num: 1, len: 1};
var count = 0;

for (var i = 2; i < 1000000; i++) {
  currLength = 0;
  getChain(i);
  seqLengths[i] = currLength;
  if (currLength > longestChain.len) {
    longestChain = {num: i, len: currLength};
  }
}
var finish = new Date();
console.log('time elapsed: ' + (finish - start) + 'ms');
console.log('count: ' + count);
console.log('longestChain: ', longestChain);

function getChain(num) {
  count++;
  if (seqLengths[num]) {
    currLength += seqLengths[num];
    return;
  } else if (num === 1) {
    return;
  } else {
    currLength++;
    num = num % 2 === 0 ? num / 2 : (3 * num) + 1;
    return getChain(num);
  }
}
// (chrome)
// time elapsed: 7398ms
// count: 6226257
// longestChain:  Object {num: 837799, len: 525}
//////////////////////////////

// Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down,
// there are exactly 6 routes to the bottom right corner.

// How many such routes are there through a 20×20 grid?

function pickPath() {

  var r = 0;
  var c = 0;
  var paths = [
    [r,r,c,c],
    [r,c,r,c],
    [r,c,c,r],
    [c,r,r,c],
    [c,r,c,r],
    [c,c,r,r]
  ];

  // in how many different orders can you add together n numbers from 2 sets?

}

function getRandPath(gridSize) {
  var r = 0;
  var d = 0;
  var path = [];
  while (path.length < 2 * gridSize) {
    if (Math.round(Math.random())) {
      if (r < gridSize) {
        path.push('r');
        r++;
      } else {
        path.push('d');
        d++;
      }
    } else {
      if (d < gridSize) {
        path.push('d');
        d++;
      } else {
        path.push('r');
        r++;
      }
    }
  }
  return path.join('');
}

var paths = {};
for (var i = 0; i < 100000; i++) {
  var p = getRandPath(6);
  paths[p] = paths[p] + 1 || 1;
}

//this isn't good enough for 20x20.

// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . .

// top left is 0,0
// when at 19,19 there are two ways of getting to 20,20 - r,d and d,r



// ['rrrrrrrrrrdddddddddd',...,'ddddddddddrrrrrrrrrr']
// 2^20



function permute (str) {

  var arr = str.split('');
  var count = 1;
  var swap, rev;

  var final = arr.sort(function(a,b) {
    return b - a;
  }).join('');

  arr.sort(function(a,b) {
    return a - b;
  });

  perm: while (arr.join('') !== final) {

    arr = arr.join('').split('');

    for (var k = arr.length-1; k >= 0; k--) {
      if (arr[k] < arr[k+1]) {
        for (var l = arr.length-1; l > k; l--) {
          if (arr[k] < arr[l]) {
            swap = arr[l];
            arr[l] = arr[k];
            arr[k] = swap;
            rev = arr.slice(k+1).reverse().join('');
            arr.splice(k+1, arr.length-1, rev);
            count++;
            continue perm;
          }
        }
      }
    }

  }
  return count;
}



//////////////////////
// Power digit sum
// Problem 16
// 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

// What is the sum of the digits of the number 2^1000?

function sumDigits(power) {
  var num = Math.pow(2, power);
  var arr = num.toString().split('');
  var sum = arr.reduce(function(prev, curr) {
    return +prev + +curr
  });
  return sum;
}

function multiplyBy2(numStr) {
  var digitX2;
  var carry = 0;
  var numArr = numStr.split('');
  var prodArr = [];
  for (var i = numArr.length-1; i >= 0; i--) {
    digitX2 = (numArr[i] * 2).toString();
    if (i === 0) {
      prodArr.unshift(+digitX2 + carry);
    } else if (digitX2.length === 2) {
      prodArr.unshift(+digitX2[1] + carry);
      carry = +digitX2[0];
    } else {
      prodArr.unshift(+digitX2[0] + carry);
      carry = 0;
    }
  }
  return prodArr.join('');
}

function powersOf2(numPowers) {
  var currNum = "2";
  for (var i = 0; i < numPowers-1; i++) {
    currNum = multiplyBy2(currNum);
  }
  return currNum;
}


var bigNumArr = powersOf2(1000).split('');

var ans = bigNumArr.reduce(function(prev, curr) {
  return +prev + +curr
});
console.log(ans);

//////////////////////////

// Number letter counts
// Problem 17
// If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are
// 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

// If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters
// would be used?

// NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters
// and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in
// compliance with British usage.




function spellNum(num) {

  var basic = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
  var teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  var tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

  var numStr = num.toString();
  var temp;

  if (numStr.length === 3) {
    if (+numStr[1] === 1) {
      temp = teens[+numStr[2]];
    } else {
      if (+numStr[1] === 0) {

        if (+numStr[2] === 0) {
          return basic[+numStr[0]-1] + ' hundred';
        } else {
          return basic[+numStr[0]-1] + ' hundred and ' + basic[+numStr[2]-1];
        }
      }
      temp = +numStr[2] === 0 ? '' : '-' + basic[+numStr[2]-1];
      temp = tens[+numStr[1]-2] + temp;
    }
    return basic[+numStr[0]-1] + ' hundred and ' + temp;
  } else if (numStr.length === 2) {
    if (num < 20) {
      return teens[num-10];
    } else {
      temp = +numStr[1] === 0 ? '' : '-' + basic[+numStr[1]-1];
      return tens[+numStr[0]-2] + temp;
    }
  } else if (numStr.length === 1) {
    return basic[num-1];
  } else {
    return "one thousand";
  }

}


function spellNum2(num) {

  var basic = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
  var teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  var tens = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

  var numStr = num.toString();
  var temp;

  if (numStr.length === 3) {
    if (+numStr[1] === 1) {
      temp = teens[+numStr[2]];
    } else {
      if (+numStr[1] === 0) {

        if (+numStr[2] === 0) {
          return basic[+numStr[0]-1] + 'hundred';
        } else {
          return basic[+numStr[0]-1] + 'hundredand' + basic[+numStr[2]-1];
        }
      }
      temp = +numStr[2] === 0 ? '' : basic[+numStr[2]-1];
      temp = tens[+numStr[1]-2] + temp;
    }
    return basic[+numStr[0]-1] + 'hundredand' + temp;
  } else if (numStr.length === 2) {
    if (num < 20) {
      return teens[num-10];
    } else {
      temp = +numStr[1] === 0 ? '' : basic[+numStr[1]-1];
      return tens[+numStr[0]-2] + temp;
    }
  } else if (numStr.length === 1) {
    return basic[num-1];
  } else {
    return "onethousand";
  }

}

var ansArr = [];
for (var i = 1; i <= 1000; i++) {
  ansArr.push(spellNum2(i));
}
console.log(ansArr.join('').length);

///////////////////////


                            75
                          95 64
                        17 47 82
                      18 35 87 10
                    20 04 82 47 65
                  19 01 23 75 03 34
                88 02 77 73 07 63 67
              99 65 04 28 06 16 70 92
            41 41 26 56 83 40 80 70 33
          41 48 72 33 47 32 37 16 94 29
        53 71 44 65 25 43 91 52 97 51 14
      70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
  63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

// var nums = ['75','95 64','17 47 82','18 35 87 10','20 04 82 47 65','19 01 23 75 03 34','88 02 77 73 07 63 67','99 65 04 28 06 16 70 92','41 41 26 56 83 40 80 70 33','41 48 72 33 47 32 37 16 94 29','53 71 44 65 25 43 91 52 97 51 14','70 11 33 28 77 73 17 78 39 68 17 57','91 71 52 38 17 14 91 43 58 50 27 29 48','63 66 04 68 89 53 67 30 73 16 69 87 40 31','04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'];


function pickPath() {
  var nums = [[75],[95,64],[17,47,82],[18,35,87,10],[20,04,82,47,65],[19,01,23,75,03,34],[88,02,77,73,07,63,67],[99,65,04,28,06,16,70,92],[41,41,26,56,83,40,80,70,33],[41,48,72,33,47,32,37,16,94,29],[53,71,44,65,25,43,91,52,97,51,14],[70,11,33,28,77,73,17,78,39,68,17,57],[91,71,52,38,17,14,91,43,58,50,27,29,48],[63,66,04,68,89,53,67,30,73,16,69,87,40,31],[04,62,98,27,23,09,70,98,73,93,38,53,60,04,23]];
  var path = [{
      index: 0,
      number: 75
    }];

  for (var i = 1; i < nums.length; i++) {
    prevIndex = path[i-1].index;
    if (Math.round(Math.random())) {
      path.push({
        index: prevIndex,
        number: nums[i][prevIndex]
      });
    } else {
      path.push({
        index: prevIndex + 1,
        number: nums[i][prevIndex+1]
      });
      prevIndex++;
    }
  }
  // console.log(path);
  return path.reduce(function(prev, curr) {
    // console.log(prev, curr);
    return prev + curr.number;
  }, 0);
}
var highest = 0;
for (var i = 0; i < 100000; i++) {
  sum = pickPath();
  highest = sum > highest ? sum : highest;
}

console.log(highest);


////////////////////

// Factorial digit sum
// Problem 20
// n! means n × (n − 1) × ... × 3 × 2 × 1

// For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
// and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

// Find the sum of the digits in the number 100!

function getFact(num) {
  var prod = num;

  for (var i = num-1; i > 0; i--) {
    prod = multiply(prod.toString(), i);
  }
  return prod;
}

// getFact(100)
// 9.332621544394418e+157

function getFact(num) {
  var prod = num.toString();
  while (num > 1) {
    return multiply(prod, getFact(num-1));
  }
  return prod;
}

function multiply(numStr1, num2) {

  var digitMultd;
  var carry = 0;
  var prodArr = [];
  var numsToSum = [];
  var num, numArr;
  for (var i = numStr1.length-1; i >= 0; i--) {
    num = (numStr1[i] * num2).toString();
    numArr = num.split('');
    for (var j = 0; j < numStr1.length-1-i; j++) {
      numArr.push('0');
    }
    num = numArr.join('');
    numsToSum.push(num);
  }
  console.log(numsToSum);
  return numsToSum.reduce(function(prev, curr) {
    return add(prev, curr);
  }, '0');

}

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  console.log(sumArr);
  return sumArr.join('');
}

function sumDigits(numStr) {
  var arr = numStr.split('');
  var sum = arr.reduce(function(prev, curr) {
    return +prev + +curr
  });
  return sum;
}
//"93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"

///////////////////

// Counting Sundays
// Problem 19
// You are given the following information, but you may prefer to do some research for yourself.

// 1 Jan 1900 was a Monday.
// Thirty days has September,
// April, June and November.
// All the rest have thirty-one,
// Saving February alone,
// Which has twenty-eight, rain or shine.
// And on leap years, twenty-nine.
// A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
// How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

function isLeapYear(year) {
  if (year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)) {
    return true;
  }
  return false;
}

function daysSince1899(year, month) {
  var daysSince1899 = 1;

  for (var i = 1900; i < year; i++) {
    daysSince1899 += isLeapYear(i) ? 366 : 365;
  }

  var months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  months[1] = isLeapYear(year) ? 29 : 28;

  for (var j = 0; j < month-1; j++) {
    daysSince1899 += months[j];
  }

  return daysSince1899;
}

var sundays = 0;

for (var i = 1901; i < 2001; i++) {
  for (var j = 1; j <= 12; j++) {
    if (daysSince1899(i, j) % 7 === 0) {
      sundays++;
    }
  }
}

/////////////
// Amicable numbers
// Problem 21
// Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
// If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

// For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

// Evaluate the sum of all the amicable numbers under 10000.

function getProperDivisors(num) {
  var factors = [];
  for (var i = 1; i < num; i++) {
    if (num % i === 0) {
      factors.push(i);
    }
  }
  return factors;
}

function findAmicableNums () {
  var factors, pair, pairFactors;
  var amiNums = [];
  for (var i = 1; i < 10000; i++) {
    if (amiNums.indexOf(i) !== -1) {
      continue;
    }
    factors = getProperDivisors(i);
    pair = factors.reduce(function(prev, curr) {
      return prev + curr;
    }, 0);
    pairFactors = getProperDivisors(pair);
    pairSum = pairFactors.reduce(function(prev, curr) {
      return prev + curr;
    }, 0);
    if (i === pairSum && i !== pair) {
      amiNums.push(i, pair);
    }
  }
  return amiNums;
}

///////////////

// Names scores
// Problem 22
// Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names,
// begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value
// by its alphabetical position in the list to obtain a name score.

// For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53,
// is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.

// What is the total of all the name scores in the file?


function slowSort (arr) {
  var start = Date.now();
  var sorted = arr.sort();
  var finish = Date.now();
  console.log("Elapsed time: " + (finish - start)/1000 + "ms");
  return sorted;
}

function getNameValue(name) {
  var abc = 'abcdefghijklmnopqrstuvwxyz';
  var nameValue = 0;
  for (var i = 0; i < name.length; i++) {
    nameValue += abc.indexOf(name[i].toLowerCase()) + 1
  }
  return nameValue;
}

function getScoreSum() {
  var sortedNames = names.sort();
  var totalScore = 0;
  for (var i = 0; i < sortedNames.length; i++) {
    totalScore += getNameValue(sortedNames[i]) * (i+1)
  }
  return totalScore;
}

//////////////////////////

// Non-abundant sums
// Problem 23
// A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example,
// the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

// A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum
// exceeds n.

// As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of
// two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be
// written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even
// though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than
// this limit.

// Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.

function getProperDivisors(num) {
  var factors = [];
  for (var i = 1; i < num; i++) {
    if (num % i === 0) {
      factors.push(i);
    }
  }
  return factors;
}

function isAbundant(num) {
  var factors = getProperDivisors(num);
  var sum = factors.reduce(function(prev, curr) {
    return prev + curr;
  }, 0);
  return sum > num ? true : false;
}



function findUnsummables() {
  var nums = [];
  var unSummableNums = [];
  var neededNum;

  top:
  for (var i = 1; i <= 30000; i++) {
    if (isAbundant(i)) {
      nums.push(i);
    }

    for (var j = 0; j < nums.length; j++) {
      neededNum = i - nums[j];
      if (nums.indexOf(neededNum) !== -1) {
        continue top;
      }
    }
    unSummableNums.push(i);
  }
  return unSummableNums;
}

/////////////////////

// Lexicographic permutations
// Problem 24
// A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the
// digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it
// lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

// 012   021   102   120   201   210

// What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

// 0123456 789, 0123456 798,
// 0123456 879, 0123456 897,
// 0123456 978, 0123456 987
// ...
// 9876543210
var nums = ['0123456789'];
var last = '0123456789';

while (nums.length < 1000000) {
  last.split('')
}

// last digit++ until its the highest
// next to last++ until the same, with the last being the next to highest
// 01234...01243...01432...04321...43210
// each stage has more steps inbetween as more digits are being shuffled
// 01234...
// 01243...01324...01342...01423...
// 01432...
// 04321...
// 43210


function getPermsBrute() {
  var num;
  var nums = [];
  for (var i = 12345; i < 543210; i++) { // no. 9876 included
    num = addZeros(i, 4);
    if (!hasDupeDigit(num)) {
      nums.push(num);
    }
  }
  return nums.sort();
}

function hasDupeDigit(num) {
  var str = num.toString();
  for (var i = 0; i < str.length; i++) {
    for (var j = 0; j < str.length; j++) {
      if (i !== j && str[i] === str[j]) {
        return true;
      }
    }
  }
  return false;
}

function addZeros(num, length) {
  var arr = num.toString().split('');
  while (arr.length < length) {
    arr.unshift("0");
  }
  return arr.join('');
}



var str = '543210';
//something recursive..

// 012345, 012354, 012534, 015234, 051234, 501234 <-- send one digit over
// 501243, 501423, 504123, 540123, 450123
// 450132, 450312, 453012, 435012, 345012,
// 345021, 345201, 342501, 324501, 234501....


function getLexPermNum (str, num) {

  var arr = str.split('');
  var count = 0;
  var swap, rev;

  var final = arr.sort(function(a,b) {
    return b - a;
  }).join('');

  arr.sort(function(a,b) {
    return a - b;
  });

  perm: while (count < num) {

    arr = arr.join('').split('');

    for (var k = arr.length-1; k >= 0; k--) {
      if (arr[k] < arr[k+1]) {
        for (var l = arr.length-1; l > k; l--) {
          if (arr[k] < arr[l]) {
            swap = arr[l];
            arr[l] = arr[k];
            arr[k] = swap;
            rev = arr.slice(k+1).reverse().join('');
            arr.splice(k+1, arr.length-1, rev);
            count++;
            continue perm;
          }
        }
      }
    }

  }
  return arr.join('');
}

// Heap's algorithm

// procedure generate(n : integer, A : array of any):
//     if n = 1 then
//           output(A)
//     else
//         for i := 0; i < n - 1; i += 1 do
//             generate(n - 1, A)
//             if n is even then
//                 swap(A[i], A[n-1])
//             else
//                 swap(A[0], A[n-1])
//             end if
//         end for
//         generate(n - 1, A)
//     end if

function heap (num) {

  var arr = (num + '').split('');
  var perms = [];

  function swap (a, b) {
    var temp = arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
  }

  function generate(n) {
    if (n === 1) {
      perms.push(arr.join());
    } else {
      for (var i = 0; i < n; i++) {
        generate(n - 1);
        swap(n % 2 ? 0 : i, n-1);
      }
    }
  }

  generate(arr.length);
  return perms;
}



function permute (str, test, cache) {
  var a = str.split('');
  var swap, rev;

  if (!cache) {
    str = a.sort(function(a,b) {
      return a - b;
    }).join('');
    cache = [str];
  }

  if (!test(str)) {
    return false;
  }

  for (var k = a.length-1; k >= 0; k--) {
    if (a[k] < a[k+1]) {
      for (var l = a.length-1; l > k; l--) {
        if (a[k] < a[l]) {
          swap = a[l];
          a[l] = a[k];
          a[k] = swap;
          rev = a.slice(k+1).reverse().join('');
          a.splice(k+1, a.length-1, rev);
          cache.push(a.join(''));
          return permute(a.join(''), test, cache)
        }
      }
    }
  }
  return cache;
}

//////////////

// 1000-digit Fibonacci number
// Problem 25

// The Fibonacci sequence is defined by the recurrence relation:

// Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
// Hence the first 12 terms will be:

// F1 = 1
// F2 = 1
// F3 = 2
// F4 = 3
// F5 = 5
// F6 = 8
// F7 = 13
// F8 = 21
// F9 = 34
// F10 = 55
// F11 = 89
// F12 = 144
// The 12th term, F12, is the first term to contain three digits.

// What is the index of the first term in the Fibonacci sequence to contain 1000 digits?

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  console.log(sumArr);
  return sumArr.join('');
}

var cache = ['wat', "1", "1"];

function fib(num) {
  if (cache[num]) {
    return cache[num];
  }
  cache[num] = add(fib(num-1), fib(num-2));
  return cache[num];
}

function findDatNum() {
  var fibIndex = 1;
  while (fib(fibIndex).length < 1000) {
    fibIndex++;
  }
  return fibIndex;
}

/////////////////////////

// Reciprocal cycles
// Problem 26
// A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

// 1/2 =   0.5
// 1/3 =   0.(3)
// 1/4 =   0.25
// 1/5 =   0.2
// 1/6 =   0.1(6)
// 1/7 =   0.(142857)
// 1/8 =   0.125
// 1/9 =   0.(1)
// 1/10  =   0.1
// Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.

// Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.

function unitFrac(num) {
  return 1 / num;
}

function divide(numerStr, denomNum) {

  var numerArr = numerStr.split('');
  var quotArr = [];
  var i = 0;
  var remainArr;
  var currNumer = numerArr[0];
  var tempArr = [];

  while (remainder !== 0 || i < 100) {

    if (currNumer % denomNum === 0) {
      quotArr.push((numerArr[i] / denomNum).toString());
      remainder = 0;
    } else {
      quotArr.push(Math.floor(numerArr[i] / denomNum));
      remainArr = (numerArr[i] % denomNum).toString().split('');
      remainArr.push('0');
    }

    i++;
  }

}

// divide('20', '5') -> '4'


////////////////////////////

// Quadratic primes
// Problem 27
// Euler discovered the remarkable quadratic formula:

// n² + n + 41

// It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40,
// 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.

// The incredible formula  n² − 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79.
// The product of the coefficients, −79 and 1601, is −126479.

// Considering quadratics of the form:

// n² + an + b, where |a| < 1000 and |b| < 1000

// where |n| is the modulus/absolute value of n
// e.g. |11| = 11 and |−4| = 4
// Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes
// for consecutive values of n, starting with n = 0.

var primes = [];
var results = {};
var result;
var allPrimes = true;
var n = 0;
var best = {
  a: null,
  b: null,
  primes: 0
};

function isPrime(num) {
  if (num <= 1) {
    return false;
  }

  if (primes.indexOf(num) !== -1) {
    return true;
  }

  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
  }
  primes.push(num);
  return true;
}

for (var a = -999; a < 1000; a++) {
  results[a] = {};
  for (var b = -999; b < 1000; b++) {
    results[a][b] = 0;
    while (allPrimes) {
      result = (n * n) + (a * n) + b;
      if (isPrime(result)) {
        results[a][b]++;
        n++;
      } else {
        allPrimes = false;
        n = 0;
        if (results[a][b] > best.primes) {
          best = {
            a: a,
            b: b,
            primes: results[a][b]
          }
        }
      }
    }
    allPrimes = true;
  }
}
console.log(best);


//////////////////////////

// Number spiral diagonals
// Problem 28
// Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:

// 21 22 23 24 25
// 20  7  8  9 10
// 19  6  1  2 11
// 18  5  4  3 12
// 17 16 15 14 13

// It can be verified that the sum of the numbers on the diagonals is 101.

// What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

// 43 44 45 46 47 48 49
// 42 21 22 23 24 25 26
// 41 20  7  8  9 10 27
// 40 19  6  1  2 11 28
// 39 18  5  4  3 12 29
// 38 17 16 15 14 13 30
// 37 36 35 34 33 32 31

// 0, 2, 2, 2, 2, 4, 4, 4, 4, 6, 6, 6, 6... -> 1002001
function spiralDiags(size) {
  var quad = 4;
  var inc = 0;
  var i = 1;
  var sum = 0;
  var maxNum = size * size;

  while (i <= maxNum) {
    console.log(i);
    sum += i;
    if (quad === 4) {
      quad = 1;
      inc += 2;
    } else {
      quad++;
    }
    i += inc;
  }
  return sum;
}

//////////////////////////

// Distinct powers
// Problem 29
// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 22=4, 23=8, 24=16, 25=32
// 32=9, 33=27, 34=81, 35=243
// 42=16, 43=64, 44=256, 45=1024
// 52=25, 53=125, 54=625, 55=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

function distinctPowers (aMin, aMax, bMin, bMax) {
  var arr = [];
  var numStr;
  for (var a = aMin; a <= aMax; a++) {
    for (var b = bMin; b <= bMax; b++) {
      numStr = power(a, b);
      if (arr.indexOf(numStr) === -1) {
        arr.push(numStr);
      }
    }
  }
  return arr.length;
}

function power (base, exp) {
  var prod = '1';

  for (var i = 0; i < exp; i++) {
    prod = multiply(prod, base)
  }
  return prod;
}

function multiply (numStr1, num2) {

  var digitMultd;
  var carry = 0;
  var prodArr = [];
  var numsToSum = [];
  var num, numArr;
  for (var i = numStr1.length-1; i >= 0; i--) {
    num = (numStr1[i] * num2).toString();
    numArr = num.split('');
    for (var j = 0; j < numStr1.length-1-i; j++) {
      numArr.push('0');
    }
    num = numArr.join('');
    numsToSum.push(num);
  }
  // console.log(numsToSum);
  return numsToSum.reduce(function(prev, curr) {
    return add(prev, curr);
  }, '0');

}

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  // console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  // console.log(sumArr);
  return sumArr.join('');
}

///////////////////////////////

// Digit fifth powers
// Problem 30
// Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

// 1634 = 14 + 64 + 34 + 44
// 8208 = 84 + 24 + 04 + 84
// 9474 = 94 + 44 + 74 + 44
// As 1 = 14 is not a sum it is not included.

// The sum of these numbers is 1634 + 8208 + 9474 = 19316.

// Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.

function fif(num) {
  var numStr = num.toString();
  var sum = 0;

  for (var i = 0; i < numStr.length; i++) {
    sum += Math.pow(+numStr[i], 5);
  }

  return sum === num ? true : false;
}

var nums = [];
for (var i = 10; i < 350000; i++) {
  if (fif(i)) {
    nums.push(i);
  }
}
console.log(nums);

//////////////////////////////

// Coin sums
// Problem 31
// In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:

// 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
// It is possible to make £2 in the following way:

// 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
// How many different ways can £2 be made using any number of coins?

function coinSums() {
  var ways = 0;

  for (var a = 0; a <= 1; a++) { // 200p
    for (var b = 0; b <= 2; b++) { // 100p
      for (var c = 0; c <= 4; c++) { // 50p
        for (var d = 0; d <= 10; d++) { // 20p
          for (var e = 0; e <= 20; e++) { // 10p
            for (var f = 0; f <= 40; f++) { // 5p
              for (var g = 0; g <= 100; g++) { // 2p
                for (var h = 0; h <= 200; h++) { // 1p
                  if ( 200*a + 100*b + 50*c + 20*d + 10*e + 5*f + 2*g + h === 200 ) {
                    ways++;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return ways;
}


//////////////////////

// Pandigital products
// Problem 32
// We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example,
// the 5-digit number, 15234, is 1 through 5 pandigital.

// The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1
// through 9 pandigital.

// Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.

// HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.

// 97 x 86 = 8342  X
// 15 x 234 = 3510
// 95 x 876 = 83220

// 156 x 234 = 36504  X

// 1 1 7
// 1 2 6
// 1 3 5
// 1 4 4  OK
// 1 5 3
// 1 6 2
// 1 7 1
// 2 2 5
// 2 3 4  OK
// 2 4 3
// 2 5 2
// 2 6 1
// 3 3 3
// 3 4 2
// 3 5 1
// 4 4 1


function pandigitalProds() {
  var str, num1, num2, prod, prodStr, num1B, num2B, prodB, prodStrB;
  var prods = [];

  for (var a = 1; a <= 9; a++) {
    for (var b = 1; b <= 9; b++) {
      for (var c = 1; c <= 9; c++) {
        for (var d = 1; d <= 9; d++) {
          for (var e = 1; e <= 9; e++) {
            str = [a,b,c,d,e].join('');

            if (!hasDupeDigit(str)) {
              num1 = +[a,b].join('');
              num2 = +[c,d,e].join('');
              prod = num1 * num2;
              prodStr = prod.toString();
              if (
                !hasDupeDigit(prodStr) &&
                prodStr.indexOf('0') === -1 &&
                prodStr.indexOf(a.toString()) === -1 &&
                prodStr.indexOf(b.toString()) === -1 &&
                prodStr.indexOf(c.toString()) === -1 &&
                prodStr.indexOf(d.toString()) === -1 &&
                prodStr.indexOf(e.toString()) === -1 &&
                prods.indexOf(prod) === -1
              ) {
                prods.push(prod);
              }
              num1B = a;
              num2B = +[b,c,d,e].join('');
              prodB = num1B * num2B;
              prodBStr = prodB.toString();
              if (
                !hasDupeDigit(prodBStr) &&
                prodBStr.indexOf('0') === -1 &&
                prodBStr.indexOf(a.toString()) === -1 &&
                prodBStr.indexOf(b.toString()) === -1 &&
                prodBStr.indexOf(c.toString()) === -1 &&
                prodBStr.indexOf(d.toString()) === -1 &&
                prodBStr.indexOf(e.toString()) === -1 &&
                prods.indexOf(prodB) === -1
              ) {
                prods.push(prodB);
              }
            }
          }
        }
      }
    }
  }
  console.log(prods);
  return prods.reduce(function(p,c) {
    return p+c;
  }, 0);
}

function hasDupeDigit(str) {
  for (var i = 0; i < str.length; i++) {
    for (var j = 0; j < str.length; j++) {
      if (i !== j && str[i] === str[j]) {
        return true;
      }
    }
  }
  return false;
}

//////////////////////

// Digit cancelling fractions
// Problem 33
// The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly
// believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.

// We shall consider fractions like, 30/50 = 3/5, to be trivial examples.

// There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits
// in the numerator and denominator.

// If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

function curiousFracs () {
  var shared, iArr, jArr, i2, j2;
  var fracs = [];
  for (var j = 10; j < 100; j++) { // j = 98
    for (var i = 10; i < j; i++) { // i = 49
      shared = shareDigit(i, j); // ['9']
      console.log(shared);
      if (shared && !(i % 10 === 0 && j % 10 === 0)) { // could just check for a zero in either number.. || vs &&
        iArr = i.toString().split(''); // ['4', '9']
        jArr = j.toString().split(''); // ['9', '8']
        if (shared.length === 1) {
          console.log(`${i} and ${j} have one shared digit: ${shared[0]}`);
          iArr.splice(iArr.indexOf(shared[0]), 1);
          jArr.splice(jArr.indexOf(shared[0]), 1);
          if (equalish(i / j, iArr / jArr)) {
            fracs.push({i: i, j: j});
          }
        } else {
          iArr.splice(iArr.indexOf(shared[0]), 1);
          jArr.splice(jArr.indexOf(shared[0]), 1);
          if (equalish(i / j, iArr / jArr)) {
            fracs.push({i: i, j: j});
          }
          iArr.splice(iArr.indexOf(shared[1]), 1);
          jArr.splice(jArr.indexOf(shared[1]), 1);
          if (equalish(i / j, iArr / jArr)) {
            fracs.push({i: i, j: j});
          }
        }
      }
    }
  }
  return fracs;
}


function shareDigit (num1, num2) {
  var str1 = num1.toString();
  var str2 = num2.toString();
  var shared = [];
  for (var i = 0; i < str1.length; i++) {
    for (var j = 0; j < str2.length; j++) {
      if (i !== j && str1[i] === str2[j]) {
        shared.push(str1[i]);
      }
    }
  }
  return shared.length > 0 ? shared : false;
}

function equalish (num1, num2) { // could add precision level
  if (num1 === num2) {
    return true;
  } else if (num1 > num2 && num1 - .00001 < num2) {
    return true;
  } else if (num2 > num1 && num2 - .00001 < num1) {
    return true;
  } else {
    return false;
  }
}

// 1/4, 2/5, 1/5, 1/2....
////////////////////////

// Digit factorials
// Problem 34
// 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

// Find the sum of all numbers which are equal to the sum of the factorial of their digits.

// Note: as 1! = 1 and 2! = 2 are not sums they are not included.

// 9! * 7 = 2540160

function digitFacts () {
  var smallFacs = [];
  var digitFacs = [];
  var numStr, numFacSum;

  for (var i = 0; i < 10; i++) {
    smallFacs.push(getFacSimple(i));
  }
  console.log(smallFacs);

  for (var j = 10; j < 2540160; j++) {
    numStr = j.toString();
    numFacSum = 0;
    for (var k = 0; k < numStr.length; k++) {
      numFacSum += smallFacs[numStr[k]];
    }
    if (j === numFacSum) {
      digitFacs.push(j);
    }
  }
  return digitFacs;
}



function getFacSimple(num) {
  while (num > 1) {
    return num * getFacSimple(num-1);
  }
  return num;
}


// ???? I am just getting 145 but apparently that's wrong.
///////////////////////////////////

// Circular primes
// Problem 35
// The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

// There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

// How many circular primes are there below one million?


// 2 -> 999,999    6! (720) ways to order a 6-digit number. 6^6 (46,656) if repeating. Less if there are zeros.
// 120 ways for 5 digit, 24 ways for 4 digit, 6 ways for 3 digit, 2 ways for 2 digits, 1 way for 1 digit.

// get primes < 1,000,000 -> 78,498
// for each prime,


// The following algorithm generates the next permutation lexicographically after a given permutation.
// It changes the given permutation in-place.

// Find the largest index k such that a[k] < a[k + 1]. If no such index exists, the permutation is the last permutation.
// Find the largest index l greater than k such that a[k] < a[l].
// Swap the value of a[k] with that of a[l].
// Reverse the sequence from a[k + 1] up to and including the final element a[n].

function permute (str, test, cache) {
  var a = str.split('');
  var swap, rev;

  if (!cache) {
    str = a.sort(function(a,b) {
      return a - b;
    }).join('');
    cache = [str];
  }

  if (!test(str)) {
    return false;
  }

  for (var k = a.length-1; k >= 0; k--) {
    if (a[k] < a[k+1]) {
      for (var l = a.length-1; l > k; l--) {
        if (a[k] < a[l]) {
          swap = a[l];
          a[l] = a[k];
          a[k] = swap;
          rev = a.slice(k+1).reverse().join('');
          a.splice(k+1, a.length-1, rev);
          cache.push(a.join(''));
          return permute(a.join(''), test, cache)
        }
      }
    }
  }
  return cache;
}

function permutedPrimesBelow (max) {
  var permPrimes = [];
  var primes = getPrimesLessThan(max);
  for (var i = 0; i < primes.length; i++) {
    if (permute(primes[i].toString(), isPrime)) {
      permPrimes.push(primes[i]);
    }
  }
  return permPrimes;
}

function circularPrimesBelow (max) {
  var circPrimes = [];
  var primes = getPrimesLessThan(max);
  for (var i = 0; i < primes.length; i++) {
    if (rotate(primes[i].toString(), isPrime)) {
      circPrimes.push(primes[i]);
    }
  }
  return circPrimes;
}

function rotate (str, test, cache) {
  var a = str.split('');

  cache = cache || [str];

  if (!test(str)) {
    return false;
  }

  a.unshift(a.pop());
  str = a.join('');

  if (cache.indexOf(str) === -1) {
    cache.push(str);
    return rotate(str, test, cache);
  }
  return cache;
}




function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

///////////////////////////////

// Double-base palindromes
// Problem 36
// The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.

// Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

// (Please note that the palindromic number, in either base, may not include leading zeros.)


function isPalindrome(str) {
  return str === str.split('').reverse().join('') ? true : false;
}

function doublePalsBelow (max) {
  var pals = [];
  var palsB = [];

  for (var i = 1; i < max; i++) {
    if (isPalindrome(i.toString()) && isPalindrome(i.toString(2))) {
      pals.push(i);
      palsB.push(i.toString(2));
    }
  }
  console.log(pals, palsB);
  return pals.reduce(function(p,c) {
    return +p + +c;
  }, 0);
}


///////////////////////////////

// Truncatable primes
// Problem 37
// The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove
// digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from
// right to left: 3797, 379, 37, and 3.

// Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

// NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

// while array.length < 11
// for each prime
// prime.popped -> prime? while length > 0
// prime.shifted -> prime? while length > 0
//// push to array

function truncPrimes() {

  var demPrimes = [];
  var i = 11;
  var arr;

  findingPrimes: while (demPrimes.length < 11) {
    if (isPrime(i)) {
      arr = (i + '').split('');
      while (arr.length > 0) {
        arr.pop();
        if (!isPrime(+arr.join(''))) {
          i++;
          continue findingPrimes;
        }
      }
      arr = (i + '').split('');
      while (arr.length > 0) {
        arr.shift();
        if (!isPrime(+arr.join(''))) {
          i++;
          continue findingPrimes;
        }
      }
      demPrimes.push(i);
    }
    i++;
  }

  console.log(demPrimes);
  return demPrimes.reduce(function(p,c) {
    return p+c;
  }, 0);

}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return num === 1 ? false : true;
}

////////////////////////

// Pandigital multiples
// Problem 38
// Take the number 192 and multiply it by each of 1, 2, and 3:

// 192 × 1 = 192
// 192 × 2 = 384
// 192 × 3 = 576
// By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product
// of 192 and (1,2,3)

// The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645,
// which is the concatenated product of 9 and (1,2,3,4,5).

// What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer
// with (1,2, ... , n) where n > 1?

         (?)
9 . . . 1 8 . . .

987654321
987654312
987654231
987654213
987654132
987654123
...


98 196X
97 194X
96 192X
95 190X
94 188X
93 186 279X
92 184 276X
91 182X

987 1974X

// greatest num possible for 9 digit number that is 1x something + 2x something:
0000 00000
9999 19998

// smallest :
5000 10000

// so.. 9182 < n < 9999 *******************

// greatest num possible for 9 digit number that is 1x something + 2x something + 3x something:
000 000 000
333 666 999

// greatest num possible for 9 digit number that is 1x something + 2x something + 3x something + 4x something:
00 00 00 000

3*n < 100, 4*n >= 100
n = 33

33 66 99 198

// greatest num possible for 9 digit number that is 1x something ... 5x something:
0 00 00 00 00

9 18 27 36 45

// greatest num possible for 9 digit number that is 1x something ... 6x something:
0 0 0 00 00 00
3 6 9 12 15 18

// greatest num possible for 9 digit number that is 1x something ... 7x something:
0 0 0 0 0 00 00

5*n < 10, 6*n >= 10
no integer solution

// greatest num possible for 9 digit number that is 1x something ... 8x something:
0 0 0 0 0 0 0 00

7*n < 10, 8*n >= 10
no integer solution

// greatest num possible for 9 digit number that is 1x something ... 9x something:
0 0 0 0 0 0 0 0 0
1 2 3 4 5 6 7 8 9


function makePandigital (num, n) {
  var str = '';
  for (var i = 1; i <= n; i++) {
    str += (i * num);
  }
  return +str;
}



// so.. 9182 < n < 9999 * (1, 2) *******************

var max = 918273645;
var nums = [];
var str;

function is1to9Pandigital (num) {
  var arr = (num + '').split('');
  var foundDigits = ['0'];
  while (arr.length > 0) {
    if (foundDigits.indexOf(arr[0]) === -1) {
      foundDigits.push(arr.shift());
    } else {
      return false;
    }
  }
  return true;
}

for (var i = 9182; i < 9999; i++) {
  str = i + '';
  str += i*2;
  if (is1to9Pandigital(+str)) {
    nums.push(i);
    max = max < +str ? str : max;
  }
}

console.log(nums, max);

//////////////////////////////////////

// Integer right triangles
// Problem 39
// If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.

// {20,48,52}, {24,45,51}, {30,40,50}

// For which value of p ≤ 1000, is the number of solutions maximised?

function findRightTris (perim) {
  var c;
  var tris = [];
  for (var a = 1; a < perim/2; a++) {
    for (var b = 1; b <= a; b++) {
      c = Math.sqrt(a*a + b*b);
      if (c % 1 === 0 && a + b + c === perim) {
        tris.push([a,b,c]);
      }
    }
  }
  return tris;
}

var max = 0;
var bestP = 12;
var len;

for (var p = 12; p <= 1000; p++) {

  len = findRightTris(p).length;
  if (len > max) {
    max = len;
    bestP = p;
  }
}

console.log(bestP);

/////////////////////////////////////

// Champernowne's constant
// Problem 40
// An irrational decimal fraction is created by concatenating the positive integers:

// 0.123456789101112131415161718192021...

// It can be seen that the 12th digit of the fractional part is 1.

// If dn represents the nth digit of the fractional part, find the value of the following expression.

// d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000

function makeChamp(num) {
  var str = '';
  for (var i = 1; i <= num; i++) {
    str += i;
  }
  return str;
}

makeChamp(99).length = 189 = 1(9) + 2(99 - 9)
makeChamp(999).length = 1(9) + 2(99 - 9) + 3(999 - 99) = 9 + 180 + 2700 = 2889

function getChampDigit(digit) {
  var totalLength = 0;
  var numLength, prevNumLen, offset;
  for (var num = 0; totalLength < digit; num++) {
    numLength = ('' + num).length;
    totalLength += numLength;
  }
  offset = totalLength - digit;
  if (offset > 0) {
    console.log(num-1, offset);
  } else {
    console.log(num, offset);
  }

  prevNumLen = ('' + (num-1)).length;
  return offset > 0 ? ('' + (num-1))[prevNumLen - offset] : ('' + (num))[0];
}

total = 1;
total *= getChampDigit(1);
total *= getChampDigit(10);
total *= getChampDigit(100);
total *= getChampDigit(1000);
total *= getChampDigit(10000);
total *= getChampDigit(100000);
total *= getChampDigit(1000000);
console.log(total);
console.log('boom!');



////////////////////////////////

// Pandigital prime
// Problem 41
// We shall say that an n-digit number is pandigital if it makes use of all the digits
// 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.

// What is the largest n-digit pandigital prime that exists?

function permuteRevUntilPrime (str) {
  var arr = str.split('');
  var swap, rev, ret;
  var unfound = true;
  var count = 0;
  var first = [];

  for (var i = 0; i < arr.length; i++) {
    first[i] = arr[arr.length-1-i];
  }

  arr.sort(function(a,b) {  //high to low
      return +b - +a;
  });

  while (unfound || count > 100) {
    // console.log(arr, first)
    if (arr.join('') === first.join('')) {
      return false;
    }
    looking: for (var k = arr.length-1; k >= 0; k--) {
      if (arr[k] > arr[k+1]) { // to make rev this was changed from < to >
        for (var l = arr.length-1; l > k; l--) {
          if (arr[k] > arr[l]) { // to make rev this was changed from < to >
            swap = arr[l];
            arr[l] = arr[k];
            arr[k] = swap;
            rev = arr.slice(k+1).reverse().join('');
            arr.splice(k+1, arr.length-1, rev);
            ret = arr.join('');
            if (isPrime(+ret)) {
              return +ret;
            } else {
              arr = ret.split('');
              count++;
              break looking;
            }
          }
        }
      }
    }
  }
}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return num === 1 ? false : true;
}


////////////////////

// Coded triangle numbers
// Problem 42
// The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// By converting each letter in a word to a number corresponding to its alphabetical position and adding these values
// we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle
// number then we shall call the word a triangle word.

// Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English
//  words, how many are triangle words?

function getMaxLength(arr) {
  var max = 0;
  for (var i = 0; i < arr.length; i++) {
    if (arr[i].length > max) {
      max = arr[i].length;
    }
  }
  return max;
}
// 14

function wordToNum(word) {
  var arr = word.split('');
  var abc = '_abcdefghijklmnopqrstuvwxyz';
  var sum = 0;
  for (var i = 0; i < arr.length; i++) {
    sum += abc.indexOf(arr[i].toLowerCase());
  }
  return sum;
}

function isTriNum(num, max) {
  var triNums = [];
  var tri = 0;
  for (var i = 1; tri <= max; i++) {
    tri = .5 * i * (i + 1);
    triNums.push(tri);
  }
  if (triNums.indexOf(num) !== -1) {
    return true;
  }
  return false;
}

function countTriWords(arr) {
  var count = 0;
  var max = getMaxLength(arr) * 26;
  for (var i = 0; i < arr.length; i++) {
    if (isTriNum(wordToNum(arr[i]), max)) {
      count++;
    }
  }
  return count;
}


/////////////////

// Sub-string divisibility
// Problem 43
// The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order,
// but it also has a rather interesting sub-string divisibility property.

// Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:

// d2d3d4=406 is divisible by 2
// d3d4d5=063 is divisible by 3
// d4d5d6=635 is divisible by 5
// d5d6d7=357 is divisible by 7
// d6d7d8=572 is divisible by 11
// d7d8d9=728 is divisible by 13
// d8d9d10=289 is divisible by 17
// Find the sum of all 0 to 9 pandigital numbers with this property.


function permuteStrAndSavePassing (str, test) {
  var arr = str.split('');
  var swap, rev, ret;
  var count = 0;
  var first = [];
  var unfound = true;
  var retArr = [];

  arr.sort(function(a,b) {  //high to low
      return +b - +a;
  });

  for (var i = 0; i < arr.length; i++) {  //low to high
    first[i] = arr[arr.length-1-i];
  }

  while (unfound) {
    if (count % 500 === 0) {
      console.log(count);
    }
    if (arr.join('') === first.join('')) {
      return retArr;
    }
    looking: for (var k = arr.length-1; k >= 0; k--) {
      if (arr[k] > arr[k+1]) {
        for (var l = arr.length-1; l > k; l--) {
          if (arr[k] > arr[l]) {
            swap = arr[l];
            arr[l] = arr[k];
            arr[k] = swap;
            rev = arr.slice(k+1).reverse().join('');
            arr.splice(k+1, arr.length-1, rev);
            ret = arr.join('');
            count++;
            if (test(ret)) {
              retArr.push(+ret);
            } else {
              arr = ret.split('');
              break looking;
            }
          }
        }
      }
    }
  }
}

function interesting(pandigital) {
  var arr = pandigital.split('');
  if (
    +arr.slice(1, 4).join('') % 2 === 0 &&
    +arr.slice(2, 5).join('') % 3 === 0 &&
    +arr.slice(3, 6).join('') % 5 === 0 &&
    +arr.slice(4, 7).join('') % 7 === 0 &&
    +arr.slice(5, 8).join('') % 11 === 0 &&
    +arr.slice(6, 9).join('') % 13 === 0 &&
    +arr.slice(7).join('') % 17 === 0
  ) {
    return true;
  }
  return false;
}

permuteStrAndSavePassing('1406357289', interesting)


///////////////////////////

// Pentagon numbers
// Problem 44
// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
// and D = |Pk − Pj| is minimised; what is the value of D?

function pent(n) {
  return n * ((3 * n) - 1) / 2;
}

function findNums(maxN) {
  var pents = ['zero'];
  var d, sum, diff;
  for (var i = 1; i < 2 * maxN; i++) {
    pents.push(pent(i));
  }
  for (var j = 2; j < maxN; j++) {
    for (var k = 1; k < j; k++) {
      // console.log(j, k);

      sum = pents[j] + pents[k];
      diff = pents[j] - pents[k];

      if (pents.indexOf(sum) !== -1 &&
          pents.indexOf(diff) !== -1 &&
          (!d || pent(j) - pent(k) > d)
      ) {
        d = diff;
        console.log(j, k, d)

      // if (hasPentSumNDiff(pent(j), pent(k)) && (!d || pent(j) - pent(k) > d)) {
        // d = pent(j) - pent(k);
        // console.log(j, k);
      }
    }
  }
  return d;
}

function hasPentSumNDiff (num1, num2) {
  console.log('nums: ' + num1 + ' ' + num2 + ' sum: ' + (num1 + num2) + ' diff: ' + (num1 - num2));
  if (isPent(num1 + num2) && isPent(num1 - num2)) {
    return true;
  }
  return false;
}

function isPent(num) {
  var i = 1;
  var disPent = 0;
  while (disPent < num) {
    disPent = pent(i);
    i++;
  }
  return num === disPent ? true : false;
}

//////////////////////////

// Triangular, pentagonal, and hexagonal
// Problem 45
// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

// Triangle    Tn=n(n+1)/2   1, 3, 6, 10, 15, ...
// Pentagonal    Pn=n(3n−1)/2    1, 5, 12, 22, 35, ...
// Hexagonal   Hn=n(2n−1)    1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.

function tri(n) {
  return n * (n + 1) / 2;
}

function pent(n) {
  return n * (3 * n - 1) / 2;
}

function hex(n) {
  return n * (2 * n - 1);
}

function isTri(num) {

  var i = 1;
  var disTri = 0;

  while (disTri < num) {
    disTri = tri(i);
    i++;
  }
  return num = disTri ? true : false;
}

function isPent(num) {
  var i = 1;
  var disPent = 0;
  while (disPent < num) {
    disPent = pent(i);
    i++;
  }
  return num === disPent ? true : false;
}

function isHex(num) {
  var i = 1;
  var disHex = 0;
  while (disHex < num) {
    disHex = hex(i);
    i++;
  }
  return num === disHex ? true : false;
}

function findIt() {
  var i = 144;
  var triNum, pentNum, hexNum;

  while (true) {
    hexNum = hex(i);
    if (isPent(hexNum) && isTri(hexNum)) {
      return hexNum;
    }
    i++;
  }
}

///////////////////////
// Goldbach's other conjecture
// Problem 46
// It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.

// 9 = 7 + 2×1^2
// 15 = 7 + 2×2^2
// 21 = 3 + 2×3^2
// 25 = 7 + 2×3^2
// 27 = 19 + 2×2^2
// 33 = 31 + 2×1^2

// It turns out that the conjecture was false.

// What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?

var oddComps = [9];
var primes = [2];
var squares = [1];
var foundNum;

function pushNextOddComp() {
  var currNum = oddComps[oddComps.length-1] + 2;

  while (isPrime(currNum)) {
    currNum += 2;
  }

  oddComps.push(currNum);
}

function pushNextPrime() {
  var currNum = primes[primes.length-1] + 1;

  while (!isPrime(currNum)) {
    currNum++;
  }

  primes.push(currNum);
}

function pushNextSquare() {
  var currNum = squares[squares.length-1];
  var currRt = Math.sqrt(currNum);
  currRt++;

  squares.push(currRt * currRt);
}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return num === 1 ? false : true;
}

function canRewrite (num) {
  console.log("Can " + num + " be re-written as the sum of a prime and a doubled square?");

  while (num > primes[primes.length-1]) {
    pushNextPrime();
  }

  while (num / 2 > squares[squares.length-1]) {
    pushNextSquare();
  }

  for (var i = 0; primes[i] < num; i++) {
    // console.log("current prime: " + primes[i]);
    for (var j = 0; squares[j] < num / 2; j++) {
      // console.log("current square: " + squares[j]);
      var currNum = primes[i] + squares[j] * 2;
      // console.log("current num: " + currNum);
      if (num === currNum) {
        console.log(num + " === " + primes[i] + " + " + "2 * " + squares[j]);
        return true;
      }
    }
  }
  console.log("Nope!");
  return false;
}

function findIt() {

  while (canRewrite(oddComps[oddComps.length-1])) {
    pushNextOddComp();
  }

  return oddComps[oddComps.length-1];
}

/////////////////
// Distinct primes factors
// Problem 47
// The first two consecutive numbers to have two distinct prime factors are:

// 14 = 2 × 7
// 15 = 3 × 5

// The first three consecutive numbers to have three distinct prime factors are:

// 644 = 2² × 7 × 23
// 645 = 3 × 5 × 43
// 646 = 2 × 17 × 19.

// Find the first four consecutive integers to have four distinct prime factors. What is the first of these numbers?

// 210 = 2 * 3 * 5 * 7

var primes = [2];

if (!Array.prototype.last){
    Array.prototype.last = function(){
        return this[this.length - 1];
    };
};

function pushNextPrime() {
  var currNum = primes[primes.length-1] + 1;

  while (!isPrime(currNum)) {
    currNum++;
  }

  primes.push(currNum);
}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return num === 1 ? false : true;
}

function primeFactorize (num, factors) {
  var factorsArr = factors || [];

  if (num === 1) {
    return factors;
  }

  while (num > primes.last()) {
    pushNextPrime();
  }

  for (var i = 0; primes[i] <= num; i++) {
    if (num % primes[i] === 0) {
      factorsArr.push(primes[i]);
      return primeFactorize(num / primes[i], factorsArr);
    }
  }
}

function countUniqueArrItems (arr) {
  var uniques = [];
  for (var i = 0; i < arr.length; i++) {
    if (uniques.indexOf(arr[i]) === -1) {
      uniques.push(arr[i]);
    }
  }
  return uniques.length;
}

function findEm() {
  var i = 210;

  while (true) {
    if (countUniqueArrItems(primeFactorize(i)) === 4
      && countUniqueArrItems(primeFactorize(i+1)) === 4
      && countUniqueArrItems(primeFactorize(i+2)) === 4
      && countUniqueArrItems(primeFactorize(i+3)) === 4) {
      return i;
    } else {
      i++;
    }
  }
}

/////////////////////
// Self powers
// Problem 48
// The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.

// Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.

function selfPow (num) {
  var result = num.toString();
  for (var i = 0; i < num-1; i++) {
    result = multiply(result, num);
  }
  return result;
}

function multiply(numStr1, num2) {

  var digitMultd;
  var carry = 0;
  var prodArr = [];
  var numsToSum = [];
  var num, numArr;
  for (var i = numStr1.length-1; i >= 0; i--) {
    num = (numStr1[i] * num2).toString();
    numArr = num.split('');
    for (var j = 0; j < numStr1.length-1-i; j++) {
      numArr.push('0');
    }
    num = numArr.join('');
    numsToSum.push(num);
  }
  // console.log(numsToSum);
  return numsToSum.reduce(function(prev, curr) {
    return add(prev, curr);
  }, '0');

}

function add(numStr1, numStr2) {
  var numArr1 = numStr1.split('');
  var numArr2 = numStr2.split('');
  var lengthDiff = numArr1.length > numArr2.length ? numArr1.length - numArr2.length : numArr2.length - numArr1.length;
  // console.log('lengthDiff: ', lengthDiff);
  var sumArr = [];
  var summedNum;
  var carry = 0;


  for (var j = 0; j < lengthDiff; j++) {
    if (numArr1.length > numArr2.length) {
      numArr2.unshift("0");
    } else {
      numArr1.unshift("0");
    }
  }

  for (var i = numArr1.length-1; i >= 0; i--) {
    summedNumStr = (+numArr1[i] + +numArr2[i] + carry).toString();
    if (summedNumStr.length > 1 && i !== 0) {
      sumArr.unshift(summedNumStr[1]);
      carry = +summedNumStr[0];
    } else {
      sumArr.unshift(summedNumStr);
      carry = 0;
    }
  }
  // console.log(sumArr);
  return sumArr.join('');
}

function addSelfPows1to(max) { // some say he's still waiting to this day...
  var start = new Date();
  result = "1";
  for (var i = 2; i <= max; i++) {
    result = add(result, selfPow(i))
  }
  console.log(result.length);
  var finish = new Date();
  console.log("Took " + (finish - start) / 1000 + " seconds.");
  return result.split('').slice(-10).join('');
}

function getTimeEstimationData(func, min, max, testMax, increment) {
  var xAxis = [];
  var yAxis = [];
  var coords = [];

  for (var i = min; i <= testMax; i += increment) {
    xAxis.push(i);
    var start = new Date();
    func(i);
    var finish = new Date();
    var elapsed = finish - start;
    yAxis.push(elapsed);
  }
  for (var j = 0; j < xAxis.length; j++) {
    coords.push(xAxis[j] + " " + yAxis[j]);
  }
  // console.log("xAxis: " + xAxis);
  // console.log("yAxis: " + yAxis);
  console.log(coords.join('\n'));
}

function getSelfPowsArr1To(max) {
  var arr = ['0'];
  for (var i = 1; i <= max; i++) {
    arr.push(selfPow(i));
  }
  return arr;
}

function addLastDigitsOfSelfPows1To(max) {
  var start = new Date();
  var arr = getSelfPowsArr1To(max);
  var result = '0';
  for (var i = 0; i < arr.length; i++) {
    if (arr[i].length > 15) {
      arr[i] = arr[i].split('').slice(-15).join('');
    }
    result = add(result, arr[i]);
  }
  var finish = new Date();
  console.log("Took " + (finish - start) / 1000 + " seconds.");
  return result;
}

function time(func) { //doesn't work
  var start = new Date();
  var x = func();
  var finish = new Date();
  var elapsed = finish - start;
  return elapsed + "ms";
}

//72.40885464816855 years to calculate, apparently.

///////////////////////
// Prime permutations
// Problem 49
// The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.

// There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.

// What 12-digit number do you form by concatenating the three terms in this sequence?

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

var dozPrimes = [1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973];
// var primes = {};

// for (var i = 0; i < dozPrimes.length; i++) {
//   primes[dozPrimes[i]] = 1;
// }

var primes = {"1009":1,"1013":1,"1019":1,"1021":1,"1031":1,"1033":1,"1039":1,"1049":1,"1051":1,"1061":1,"1063":1,"1069":1,"1087":1,"1091":1,"1093":1,"1097":1,"1103":1,"1109":1,"1117":1,"1123":1,"1129":1,"1151":1,"1153":1,"1163":1,"1171":1,"1181":1,"1187":1,"1193":1,"1201":1,"1213":1,"1217":1,"1223":1,"1229":1,"1231":1,"1237":1,"1249":1,"1259":1,"1277":1,"1279":1,"1283":1,"1289":1,"1291":1,"1297":1,"1301":1,"1303":1,"1307":1,"1319":1,"1321":1,"1327":1,"1361":1,"1367":1,"1373":1,"1381":1,"1399":1,"1409":1,"1423":1,"1427":1,"1429":1,"1433":1,"1439":1,"1447":1,"1451":1,"1453":1,"1459":1,"1471":1,"1481":1,"1483":1,"1487":1,"1489":1,"1493":1,"1499":1,"1511":1,"1523":1,"1531":1,"1543":1,"1549":1,"1553":1,"1559":1,"1567":1,"1571":1,"1579":1,"1583":1,"1597":1,"1601":1,"1607":1,"1609":1,"1613":1,"1619":1,"1621":1,"1627":1,"1637":1,"1657":1,"1663":1,"1667":1,"1669":1,"1693":1,"1697":1,"1699":1,"1709":1,"1721":1,"1723":1,"1733":1,"1741":1,"1747":1,"1753":1,"1759":1,"1777":1,"1783":1,"1787":1,"1789":1,"1801":1,"1811":1,"1823":1,"1831":1,"1847":1,"1861":1,"1867":1,"1871":1,"1873":1,"1877":1,"1879":1,"1889":1,"1901":1,"1907":1,"1913":1,"1931":1,"1933":1,"1949":1,"1951":1,"1973":1,"1979":1,"1987":1,"1993":1,"1997":1,"1999":1,"2003":1,"2011":1,"2017":1,"2027":1,"2029":1,"2039":1,"2053":1,"2063":1,"2069":1,"2081":1,"2083":1,"2087":1,"2089":1,"2099":1,"2111":1,"2113":1,"2129":1,"2131":1,"2137":1,"2141":1,"2143":1,"2153":1,"2161":1,"2179":1,"2203":1,"2207":1,"2213":1,"2221":1,"2237":1,"2239":1,"2243":1,"2251":1,"2267":1,"2269":1,"2273":1,"2281":1,"2287":1,"2293":1,"2297":1,"2309":1,"2311":1,"2333":1,"2339":1,"2341":1,"2347":1,"2351":1,"2357":1,"2371":1,"2377":1,"2381":1,"2383":1,"2389":1,"2393":1,"2399":1,"2411":1,"2417":1,"2423":1,"2437":1,"2441":1,"2447":1,"2459":1,"2467":1,"2473":1,"2477":1,"2503":1,"2521":1,"2531":1,"2539":1,"2543":1,"2549":1,"2551":1,"2557":1,"2579":1,"2591":1,"2593":1,"2609":1,"2617":1,"2621":1,"2633":1,"2647":1,"2657":1,"2659":1,"2663":1,"2671":1,"2677":1,"2683":1,"2687":1,"2689":1,"2693":1,"2699":1,"2707":1,"2711":1,"2713":1,"2719":1,"2729":1,"2731":1,"2741":1,"2749":1,"2753":1,"2767":1,"2777":1,"2789":1,"2791":1,"2797":1,"2801":1,"2803":1,"2819":1,"2833":1,"2837":1,"2843":1,"2851":1,"2857":1,"2861":1,"2879":1,"2887":1,"2897":1,"2903":1,"2909":1,"2917":1,"2927":1,"2939":1,"2953":1,"2957":1,"2963":1,"2969":1,"2971":1,"2999":1,"3001":1,"3011":1,"3019":1,"3023":1,"3037":1,"3041":1,"3049":1,"3061":1,"3067":1,"3079":1,"3083":1,"3089":1,"3109":1,"3119":1,"3121":1,"3137":1,"3163":1,"3167":1,"3169":1,"3181":1,"3187":1,"3191":1,"3203":1,"3209":1,"3217":1,"3221":1,"3229":1,"3251":1,"3253":1,"3257":1,"3259":1,"3271":1,"3299":1,"3301":1,"3307":1,"3313":1,"3319":1,"3323":1,"3329":1,"3331":1,"3343":1,"3347":1,"3359":1,"3361":1,"3371":1,"3373":1,"3389":1,"3391":1,"3407":1,"3413":1,"3433":1,"3449":1,"3457":1,"3461":1,"3463":1,"3467":1,"3469":1,"3491":1,"3499":1,"3511":1,"3517":1,"3527":1,"3529":1,"3533":1,"3539":1,"3541":1,"3547":1,"3557":1,"3559":1,"3571":1,"3581":1,"3583":1,"3593":1,"3607":1,"3613":1,"3617":1,"3623":1,"3631":1,"3637":1,"3643":1,"3659":1,"3671":1,"3673":1,"3677":1,"3691":1,"3697":1,"3701":1,"3709":1,"3719":1,"3727":1,"3733":1,"3739":1,"3761":1,"3767":1,"3769":1,"3779":1,"3793":1,"3797":1,"3803":1,"3821":1,"3823":1,"3833":1,"3847":1,"3851":1,"3853":1,"3863":1,"3877":1,"3881":1,"3889":1,"3907":1,"3911":1,"3917":1,"3919":1,"3923":1,"3929":1,"3931":1,"3943":1,"3947":1,"3967":1,"3989":1,"4001":1,"4003":1,"4007":1,"4013":1,"4019":1,"4021":1,"4027":1,"4049":1,"4051":1,"4057":1,"4073":1,"4079":1,"4091":1,"4093":1,"4099":1,"4111":1,"4127":1,"4129":1,"4133":1,"4139":1,"4153":1,"4157":1,"4159":1,"4177":1,"4201":1,"4211":1,"4217":1,"4219":1,"4229":1,"4231":1,"4241":1,"4243":1,"4253":1,"4259":1,"4261":1,"4271":1,"4273":1,"4283":1,"4289":1,"4297":1,"4327":1,"4337":1,"4339":1,"4349":1,"4357":1,"4363":1,"4373":1,"4391":1,"4397":1,"4409":1,"4421":1,"4423":1,"4441":1,"4447":1,"4451":1,"4457":1,"4463":1,"4481":1,"4483":1,"4493":1,"4507":1,"4513":1,"4517":1,"4519":1,"4523":1,"4547":1,"4549":1,"4561":1,"4567":1,"4583":1,"4591":1,"4597":1,"4603":1,"4621":1,"4637":1,"4639":1,"4643":1,"4649":1,"4651":1,"4657":1,"4663":1,"4673":1,"4679":1,"4691":1,"4703":1,"4721":1,"4723":1,"4729":1,"4733":1,"4751":1,"4759":1,"4783":1,"4787":1,"4789":1,"4793":1,"4799":1,"4801":1,"4813":1,"4817":1,"4831":1,"4861":1,"4871":1,"4877":1,"4889":1,"4903":1,"4909":1,"4919":1,"4931":1,"4933":1,"4937":1,"4943":1,"4951":1,"4957":1,"4967":1,"4969":1,"4973":1,"4987":1,"4993":1,"4999":1,"5003":1,"5009":1,"5011":1,"5021":1,"5023":1,"5039":1,"5051":1,"5059":1,"5077":1,"5081":1,"5087":1,"5099":1,"5101":1,"5107":1,"5113":1,"5119":1,"5147":1,"5153":1,"5167":1,"5171":1,"5179":1,"5189":1,"5197":1,"5209":1,"5227":1,"5231":1,"5233":1,"5237":1,"5261":1,"5273":1,"5279":1,"5281":1,"5297":1,"5303":1,"5309":1,"5323":1,"5333":1,"5347":1,"5351":1,"5381":1,"5387":1,"5393":1,"5399":1,"5407":1,"5413":1,"5417":1,"5419":1,"5431":1,"5437":1,"5441":1,"5443":1,"5449":1,"5471":1,"5477":1,"5479":1,"5483":1,"5501":1,"5503":1,"5507":1,"5519":1,"5521":1,"5527":1,"5531":1,"5557":1,"5563":1,"5569":1,"5573":1,"5581":1,"5591":1,"5623":1,"5639":1,"5641":1,"5647":1,"5651":1,"5653":1,"5657":1,"5659":1,"5669":1,"5683":1,"5689":1,"5693":1,"5701":1,"5711":1,"5717":1,"5737":1,"5741":1,"5743":1,"5749":1,"5779":1,"5783":1,"5791":1,"5801":1,"5807":1,"5813":1,"5821":1,"5827":1,"5839":1,"5843":1,"5849":1,"5851":1,"5857":1,"5861":1,"5867":1,"5869":1,"5879":1,"5881":1,"5897":1,"5903":1,"5923":1,"5927":1,"5939":1,"5953":1,"5981":1,"5987":1,"6007":1,"6011":1,"6029":1,"6037":1,"6043":1,"6047":1,"6053":1,"6067":1,"6073":1,"6079":1,"6089":1,"6091":1,"6101":1,"6113":1,"6121":1,"6131":1,"6133":1,"6143":1,"6151":1,"6163":1,"6173":1,"6197":1,"6199":1,"6203":1,"6211":1,"6217":1,"6221":1,"6229":1,"6247":1,"6257":1,"6263":1,"6269":1,"6271":1,"6277":1,"6287":1,"6299":1,"6301":1,"6311":1,"6317":1,"6323":1,"6329":1,"6337":1,"6343":1,"6353":1,"6359":1,"6361":1,"6367":1,"6373":1,"6379":1,"6389":1,"6397":1,"6421":1,"6427":1,"6449":1,"6451":1,"6469":1,"6473":1,"6481":1,"6491":1,"6521":1,"6529":1,"6547":1,"6551":1,"6553":1,"6563":1,"6569":1,"6571":1,"6577":1,"6581":1,"6599":1,"6607":1,"6619":1,"6637":1,"6653":1,"6659":1,"6661":1,"6673":1,"6679":1,"6689":1,"6691":1,"6701":1,"6703":1,"6709":1,"6719":1,"6733":1,"6737":1,"6761":1,"6763":1,"6779":1,"6781":1,"6791":1,"6793":1,"6803":1,"6823":1,"6827":1,"6829":1,"6833":1,"6841":1,"6857":1,"6863":1,"6869":1,"6871":1,"6883":1,"6899":1,"6907":1,"6911":1,"6917":1,"6947":1,"6949":1,"6959":1,"6961":1,"6967":1,"6971":1,"6977":1,"6983":1,"6991":1,"6997":1,"7001":1,"7013":1,"7019":1,"7027":1,"7039":1,"7043":1,"7057":1,"7069":1,"7079":1,"7103":1,"7109":1,"7121":1,"7127":1,"7129":1,"7151":1,"7159":1,"7177":1,"7187":1,"7193":1,"7207":1,"7211":1,"7213":1,"7219":1,"7229":1,"7237":1,"7243":1,"7247":1,"7253":1,"7283":1,"7297":1,"7307":1,"7309":1,"7321":1,"7331":1,"7333":1,"7349":1,"7351":1,"7369":1,"7393":1,"7411":1,"7417":1,"7433":1,"7451":1,"7457":1,"7459":1,"7477":1,"7481":1,"7487":1,"7489":1,"7499":1,"7507":1,"7517":1,"7523":1,"7529":1,"7537":1,"7541":1,"7547":1,"7549":1,"7559":1,"7561":1,"7573":1,"7577":1,"7583":1,"7589":1,"7591":1,"7603":1,"7607":1,"7621":1,"7639":1,"7643":1,"7649":1,"7669":1,"7673":1,"7681":1,"7687":1,"7691":1,"7699":1,"7703":1,"7717":1,"7723":1,"7727":1,"7741":1,"7753":1,"7757":1,"7759":1,"7789":1,"7793":1,"7817":1,"7823":1,"7829":1,"7841":1,"7853":1,"7867":1,"7873":1,"7877":1,"7879":1,"7883":1,"7901":1,"7907":1,"7919":1,"7927":1,"7933":1,"7937":1,"7949":1,"7951":1,"7963":1,"7993":1,"8009":1,"8011":1,"8017":1,"8039":1,"8053":1,"8059":1,"8069":1,"8081":1,"8087":1,"8089":1,"8093":1,"8101":1,"8111":1,"8117":1,"8123":1,"8147":1,"8161":1,"8167":1,"8171":1,"8179":1,"8191":1,"8209":1,"8219":1,"8221":1,"8231":1,"8233":1,"8237":1,"8243":1,"8263":1,"8269":1,"8273":1,"8287":1,"8291":1,"8293":1,"8297":1,"8311":1,"8317":1,"8329":1,"8353":1,"8363":1,"8369":1,"8377":1,"8387":1,"8389":1,"8419":1,"8423":1,"8429":1,"8431":1,"8443":1,"8447":1,"8461":1,"8467":1,"8501":1,"8513":1,"8521":1,"8527":1,"8537":1,"8539":1,"8543":1,"8563":1,"8573":1,"8581":1,"8597":1,"8599":1,"8609":1,"8623":1,"8627":1,"8629":1,"8641":1,"8647":1,"8663":1,"8669":1,"8677":1,"8681":1,"8689":1,"8693":1,"8699":1,"8707":1,"8713":1,"8719":1,"8731":1,"8737":1,"8741":1,"8747":1,"8753":1,"8761":1,"8779":1,"8783":1,"8803":1,"8807":1,"8819":1,"8821":1,"8831":1,"8837":1,"8839":1,"8849":1,"8861":1,"8863":1,"8867":1,"8887":1,"8893":1,"8923":1,"8929":1,"8933":1,"8941":1,"8951":1,"8963":1,"8969":1,"8971":1,"8999":1,"9001":1,"9007":1,"9011":1,"9013":1,"9029":1,"9041":1,"9043":1,"9049":1,"9059":1,"9067":1,"9091":1,"9103":1,"9109":1,"9127":1,"9133":1,"9137":1,"9151":1,"9157":1,"9161":1,"9173":1,"9181":1,"9187":1,"9199":1,"9203":1,"9209":1,"9221":1,"9227":1,"9239":1,"9241":1,"9257":1,"9277":1,"9281":1,"9283":1,"9293":1,"9311":1,"9319":1,"9323":1,"9337":1,"9341":1,"9343":1,"9349":1,"9371":1,"9377":1,"9391":1,"9397":1,"9403":1,"9413":1,"9419":1,"9421":1,"9431":1,"9433":1,"9437":1,"9439":1,"9461":1,"9463":1,"9467":1,"9473":1,"9479":1,"9491":1,"9497":1,"9511":1,"9521":1,"9533":1,"9539":1,"9547":1,"9551":1,"9587":1,"9601":1,"9613":1,"9619":1,"9623":1,"9629":1,"9631":1,"9643":1,"9649":1,"9661":1,"9677":1,"9679":1,"9689":1,"9697":1,"9719":1,"9721":1,"9733":1,"9739":1,"9743":1,"9749":1,"9767":1,"9769":1,"9781":1,"9787":1,"9791":1,"9803":1,"9811":1,"9817":1,"9829":1,"9833":1,"9839":1,"9851":1,"9857":1,"9859":1,"9871":1,"9883":1,"9887":1,"9901":1,"9907":1,"9923":1,"9929":1,"9931":1,"9941":1,"9949":1,"9967":1,"9973":1};

function has2PermPrimes (num) {
  var str = num.toString();
  var perms = permute(str);
  var count = 0;
  var primePerms = [];

  for (var i = 0; i < perms.length; i++) {
    if (primes[perms[i]]) {
      count++;
      primePerms.push(perms[i]);
    }
  }

  return count >= 3 ? primePerms : false;
}

function permute (str, cache) {
  var a = str.split('');
  var swap, rev;

  if (!cache) {
    str = a.sort(function(a,b) {
      return a - b;
    }).join('');
    cache = [str];
  }

  for (var k = a.length-1; k >= 0; k--) {
    if (a[k] < a[k+1]) {
      for (var l = a.length-1; l > k; l--) {
        if (a[k] < a[l]) {
          swap = a[l];
          a[l] = a[k];
          a[k] = swap;
          rev = a.slice(k+1).reverse().join('');
          a.splice(k+1, a.length-1, rev);
          cache.push(a.join(''));
          return permute(a.join(''), cache)
        }
      }
    }
  }
  return cache;
}

var primeTripsOrMore = [];

for (var i = 0; i < dozPrimes.length; i++) {
  var curr = has2PermPrimes(dozPrimes[i]);
  if (curr) {
    primeTripsOrMore.push(curr);
  }
}

// function findMatchingInc(arr) {
//   var obj = {};
//   var diff;

//   for (var i = 0; i < arr.length; i++) {
//     obj[arr[i]] = 1;
//   }

//   for (var j = 0; j < arr.length; j++) {
//     for (var k = 0; k < arr.length; k++) {
//       if (j !== k) {
//         diff = +arr[j] > +arr[k] ? +arr[j] - +arr[k] : +arr[k] - +arr[j];
//         var next =
//         if
//       }
//     }
//   }
// }


function getDiffs(arr) {
  var diff;
  var diffs = [];
  for (var j = 1; j < arr.length; j++) {
    for (var k = 0; k < j; k++) {
      diff = +arr[j] - +arr[k];
      diffs.push(diff);
    }
  }
  return diffs;
}

function arrHasDupe(arr) {
  for (var j = 0; j < arr.length; j++) {
    for (var k = 1; k < arr.length; k++) {
      if (j !== k && arr[j] === arr[k]) {
        return true;
      }
    }
  }
  return false;
}

var maybes = [];

for (var l = 0; l < primeTripsOrMore.length; l++) {
  diffs = getDiffs(primeTripsOrMore[l]);
  if (arrHasDupe(diffs)) {
    maybes.push(primeTripsOrMore[l]);
  }
}


for (var m = 0; m < primeTripsOrMore.length; m++) {
  if (equidistantTrips(primeTripsOrMore[m])) {
    console.log(equidistantTrips(primeTripsOrMore[m]));
  }
}

var sampleArr = [104, 150, 151, 172, 176, 200, 212, 247, 250, 268]; // 150, 200, 250 are equidistant
// how to test for 3 equidistant values?

//for each in arr
// for each other in array that is greater
// diff > 0. other + diff = something else in array? (each + 2(diff) = another in array?)

function equidistantTrips(arr) {
  var diff;
  for (var i = 0; i < arr.length; i++) {
    for (var j = i + 1; j < arr.length; j++) {
      diff = +arr[j] - +arr[i];
      if (arr.indexOf((+arr[i] + 2 * diff).toString()) !== -1) {
        console.log('diff: ' + diff);
        return [+arr[i], +arr[i] + diff, +arr[i] + 2 * diff];
      }
    }
  }
}

///////////////////////////////
// Consecutive prime sum
// Problem 50
// The prime 41, can be written as the sum of six consecutive primes:

// 41 = 2 + 3 + 5 + 7 + 11 + 13
// This is the longest sum of consecutive primes that adds to a prime below one-hundred.

// The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.

// Which prime, below one-million, can be written as the sum of the most consecutive primes?

// first 546 primes add to 997661

var primes = getPrimesLessThan(1000000); // 78498 primes

function sumPrimes(firstPrimeIndex, totalNeeded) {
  var sum = 0;
  var i = firstPrimeIndex || 0;
  var count = 0;
  var ret;

  while (sum < totalNeeded) {
    sum += primes[i];
    i++;
    count++;
  }

  count--;
  sum -= primes[i-1];

  if (sum === totalNeeded) {
    ret = {};
    ret[sum] = count;
    return ret;
  } else {
    console.log("failed - " + sum + ", " + count + " primes");
  }
}

function sumPrimesRange (minIndex, maxIndex) {
  var sum = 0;
  var str = '';

  for (var i = minIndex; i <= maxIndex; i++) {
    sum += primes[i];
    str += primes[i] + " + ";
  }
  str = str.split('').slice(0, -3).join('');
  str += " = " + sum;
  console.log(str);
  return sum;
}


function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function getPrimesLessThan(num) {
  var primes = [];
  for (var i = 2; i < num; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }
  return primes;
}

///////////////////////
// Prime digit replacements
// Problem 51
// By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

// By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the
// ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member
// of this family, is the smallest prime with this property.

// Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime
// value family.

// for (var i = 0; i < arr.length; i++) {
//   console.log(isPrime(arr[i]));
// }

var primes = [2];

function findIt() {
  var i = 0;
  while(true) {
    if (checkNumFor8PrimeFam(primes[i])) {
      console.log(primes[i]);
      return checkNumFor8PrimeFam(primes[i]);
    }
    i++;
    pushNextPrime();
  }
}

function pushNextPrime() {
  var currNum = primes[primes.length-1] + 1;

  while (!isPrime(currNum)) {
    currNum++;
  }

  primes.push(currNum);
}

function isPrime(num) {
  // var count = 1;
  var i = 2;
  var currentMax = num;
  while (i < currentMax) {

    if (num % i === 0) {
      // console.log(count);
      return false;
    } else {
      currentMax = num / i;
    }
    i++;
    // count++;
  }
  // console.log(count);
  return true;
}

function checkNumFor8PrimeFam(num) {
  var fams = getFamilies(num);
  var count;

  for (var i = 0; i < fams.length; i++) {
    for (var pat in fams[i]) {
      count = 0;
      for (var j = 0; j < 10; j++) {
        if ((+fams[i][pat][j]).toString().length === num.toString().length
          && isPrime(+fams[i][pat][j])) {
          count++;
        }
      }
      if (count >= 8) {
        return fams[i][pat];
      }
    }
  }
  return false;
}

function getFamilies(num) {
  var fams = [];

  for (var i = 1; i < num.toString().length; i++) {
    fams.push(digitReplace(num, i));
  }
  return fams;
}

function digitReplace(num, count) { // num = 3923, count = 2
  var str = num.toString();
  var patterns = getPatterns(num, count);
  var pat;
  var final = {};
  var currNumArr;
  var digit;

  for (var i = 0; i < patterns.length; i++) {
    pat = patterns[i];
    final[pat] = [];
    for (var j = 0; j < 10; j++) {
      digit = j.toString();
      currNumArr = [];
      for (var k = 0; k < pat.length; k++) {
        if (pat[k] === "1") {
          currNumArr.push(str[k]);
        } else {
          currNumArr.push(digit);
        }
        if (k === pat.length-1) {
          final[pat].push(currNumArr.join(''));
        }
      }
    }
  }

  return final;
}

// var final = {
//   "1100" : {
//     "0" : [
//       "0023",
//       "1123",
//       "2223",
//       "3323",
//       "4423",
//       "5523",
//       "6623",
//       "7723",
//       "8823",
//       "9923"
//     ],
//     "1" : [...],
//     ...
//   },
//   "1010" : {...},
//   ...
// }

function getPatterns(num, count) {
  var str = num.toString();
  var patternArr = Array(str.length);
  var patternStr;

  for (var j = 0; j < count; j++) {
    patternArr.push("0");
  }
  for (var i = 0; i < str.length - count; i++) {
    patternArr.push("1");
  }

  patternStr = patternArr.join('');

  return permute(patternStr);

}

function permute (str, cache) {
  var a = str.split('');
  var swap, rev;

  if (!cache) {
    str = a.sort(function(a,b) {
      return a - b;
    }).join('');
    cache = [str];
  }

  for (var k = a.length-1; k >= 0; k--) {
    if (a[k] < a[k+1]) {
      for (var l = a.length-1; l > k; l--) {
        if (a[k] < a[l]) {
          swap = a[l];
          a[l] = a[k];
          a[k] = swap;
          rev = a.slice(k+1).reverse().join('');
          a.splice(k+1, a.length-1, rev);
          cache.push(a.join(''));
          return permute(a.join(''), cache)
        }
      }
    }
  }
  return cache;
}

/////////////////////////////
// Poker hands
// Problem 54
// In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:

// High Card: Highest value card.
// One Pair: Two cards of the same value.
// Two Pairs: Two different pairs.
// Three of a Kind: Three cards of the same value.
// Straight: All cards are consecutive values.
// Flush: All cards of the same suit.
// Full House: Three of a kind and a pair.
// Four of a Kind: Four cards of the same value.
// Straight Flush: All cards are consecutive values of same suit.
// Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.
// The cards are valued in the order:
// 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.

// If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.

// Consider the following five hands dealt to two players:

// Hand    Player 1    Player 2    Winner
// 1   5H 5C 6S 7S KD
// Pair of Fives
//   2C 3S 8S 8D TD
// Pair of Eights
//   Player 2
// 2   5D 8C 9S JS AC
// Highest card Ace
//   2C 5C 7D 8S QH
// Highest card Queen
//   Player 1
// 3   2D 9C AS AH AC
// Three Aces
//   3D 6D 7D TD QD
// Flush with Diamonds
//   Player 2
// 4   4D 6S 9H QH QC
// Pair of Queens
// Highest card Nine
//   3D 6D 7H QD QS
// Pair of Queens
// Highest card Seven
//   Player 1
// 5   2H 2D 4C 4D 4S
// Full House
// With Three Fours
//   3C 3D 3S 9S 9D
// Full House
// with Three Threes
//   Player 1
// The file, poker.txt, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner.

// How many hands does Player 1 win?


function whoWins(handStr1, handStr2) {
  var hand1Best = getBestHand(handStr1);
  var hand2Best = getBestHand(handStr2);

  if (hand1Best.rank === hand2Best.rank) {
    return runOff(hand1Best, hand2Best);
  } else if (hand1Best.rank > hand2Best.rank) {
    return "Player 1";
  } else {
    return "Player 2";
  }
}

function runOff(hand1Best, hand2Best) {
  var type = hand1Best.type;

  switch (type) {
    case "royalFlush":
      return "Tie";
    case "straightFlush":
      if (firstCardIsHigher(hand1Best.val[0], hand2Best.val[0])) {
        return "Player 1";
      } else if (firstCardIsHigher(hand2Best.val[0], hand1Best.val[0])) {
        return "Player 2";
      } else {
        return "Tie";
      }

    case "fullHouse":
      if (firstCardIsHigher(hand1Best.val[0], hand2Best.val[0])) {
        return "Player 1";
      } else if (firstCardIsHigher(hand2Best.val[0], hand1Best.val[0])) {
        return "Player 2";
      } else if (firstCardIsHigher(hand1Best.val[1], hand2Best.val[1])) {
        return "Player 1";
      } else if (firstCardIsHigher(hand2Best.val[1], hand1Best.val[1])) {
        return "Player 2";
      } else {
        return firstCardIsHigher(hand1Best.val[2], hand2Best.val[2]) ? "Player 1" : "Player 2";
      }
    case "flush":
      return firstSuitIsHigher(hand1Best.val, hand2Best.val) ? "Player 1" : "Player 2";
    case "straight":
      return firstCardIsHigher(hand1Best.val, hand2Best.val) ? "Player 1" : "Player 2";
    case "trips":
      return firstCardIsHigher(hand1Best.val, hand2Best.val) ? "Player 1" : "Player 2";
    case "twoPair":
      if (firstCardIsHigher(hand1Best.val[0], hand2Best.val[0])) {
        return "Player 1";
      } else if (firstCardIsHigher(hand2Best.val[0], hand1Best.val[0])) {
        return "Player 2";
      } else {
        return firstCardIsHigher(hand1Best.val[1], hand2Best.val[1]) ? "Player 1" : "Player 2";
      }
    case "quads":
    case "onePair":
    case "highCard":
      return firstCardIsHigher(hand1Best.val, hand2Best.val) ? "Player 1" : "Player 2";
  }
}

function getBestHand(handStr) {
  var hand = makeHandArr(handStr);

  if (check.royalFlush(hand)) {
    return {type: "royalFlush", rank: 10, val: check.royalFlush(hand)};
  } else if (check.straightFlush(hand)) {
    return {type: "straightFlush", rank: 9, val: check.straightFlush(hand)};
  } else if (check.quads(hand)) {
    return {type: "quads", rank: 8, val: check.quads(hand)};
  } else if (check.fullHouse(hand)) {
    return {type: "fullHouse", rank: 7, val: check.fullHouse(hand)};
  } else if (check.flush(hand)) {
    return {type: "flush", rank: 6, val: check.flush(hand)};
  } else if (check.straight(hand)) {
    return {type: "straight", rank: 5, val: check.straight(hand)};
  } else if (check.trips(hand)) {
    return {type: "trips", rank: 4, val: check.trips(hand)};
  } else if (check.twoPair(hand)) {
    return {type: "twoPair", rank: 3, val: check.twoPair(hand)};
  } else if (check.onePair(hand)) {
    return {type: "onePair", rank: 2, val: check.onePair(hand)};
  } else {
    return {type: "highCard", rank: 1, val: check.highCard(hand)};
  }
}

function makeHandArr(handStr) {
  var handArr = handStr.split(" ");
  var hand = [];
  var cardObj;

  for (var i = 0; i < 5; i++) {
    cardObj = {};
    cardObj.value = handArr[i][0];
    cardObj.suit = handArr[i][1];
    hand.push(cardObj);
  }
  return hand;
}

var check = {

  highCard: function (hand) {
    var bestCard = hand[0];
    for (var i = 1; i < 5; i++) {
      if (higherCard(bestCard, hand[i])) {
        bestCard = higherCard(bestCard, hand[i])
      }
    }
    return bestCard.value;
  },

  onePair: function (hand) {
    var matches = [];
    for (var i = 0; i < 5; i++) {
      for (var j = i+1; j < 5 ; j++) {
        if (hand[i].value === hand[j].value) {
          matches.push(hand[i].value);
        }
      }
    }

    if (matches.length === 1) { // returns false if better hand exists
      return matches[0];
    }

    return false;
  },

  twoPair: function (hand) {
    var matches = [];
    for (var i = 0; i < 5; i++) {
      for (var j = i+1; j < 5 ; j++) {
        if (hand[i].value === hand[j].value) {
          matches.push(hand[i].value);
        }
      }
    }

    if (matches.length === 2) { // returns false if better hand exists
      return [matches[0], matches[1]];
    }

    return false;
  },

  trips: function (hand) {
    var matches = [];
    for (var i = 0; i < 5; i++) {
      for (var j = i+1; j < 5 ; j++) {
        if (hand[i].value === hand[j].value) {
          matches.push(hand[i].value);
        }
      }
    }

    if (matches.length === 3) { // returns false if better hand exists
      return matches[0];
    }

    return false;
  },

  straight: function (hand) {
    var values = [];
    var neededCards = [];
    var neededCards2 = [];

    for (var card in hand) {
      values.push(hand[card].value);
    }

    var highCard = check.highCard(hand);
    if (highCard === 'A') {
      neededCards.push('K', 'Q', 'J', 'T');
      neededCards2.push('2', '3', '4', '5');
    } else if (highCard === 'K') {
      neededCards.push('Q', 'J', 'T', '9')
    } else if (highCard === 'Q') {
      neededCards.push('J', 'T', '9', '8')
    } else if (highCard === 'J') {
      neededCards.push('T', '9', '8', '7')
    } else {
      neededCards.push((+highCard - 1).toString(), (+highCard - 2).toString(), (+highCard - 3).toString(), (+highCard - 4).toString())
    }

    console.log(neededCards, neededCards2);
    console.log(values);

    for (var i = 0; i < 4; i++) {
      if (values.indexOf(neededCards[i]) === -1) {
        if (highCard === 'A') {
          if (values.indexOf(neededCards2[i]) === -1) {
            return false;
          } else {
            neededCards = neededCards2;
            continue;
          }
        }
        return false;
      }
    }
    return check.highCard(hand);
  },

  flush: function (hand) {
    var suits = [];
    for (var i = 0; i < 5; i++) {
      suits.push(hand[i].suit);
    }
    if (suits[0] === suits[1]
      && suits[0] === suits[2]
      && suits[0] === suits[3]
      && suits[0] === suits[4]) {
      return check.highCard(hand);
    }

    return false;
  },

  fullHouse: function (hand) {
    var matches = [];
    var trip, pair, kicker;

    for (var i = 0; i < 5; i++) {
      for (var j = i+1; j < 5 ; j++) {
        if (hand[i].value === hand[j].value) {
          matches.push(hand[i].value);
        }
      }
    }

    if (matches.length === 4) { // returns false if better hand exists
      if (matches[0] === matches[1]) {
        trip = matches[0];
        if (matches[2] === trip) {
          pair = matches[3]
        } else {
          pair = matches[2]
        }
      } else {
        trip = matches[1];
        pair = matches[0];
      }
      return [trip, pair, kicker];
    }

    return false;
  },

  quads: function (hand) {
    var counts = {};
    for (var i = 0; i < 5; i++) {
      if (counts[hand[i].value]) {
        counts[hand[i].value]++;
      } else {
        counts[hand[i].value] = 1;
      }
    }
    for (var val in counts) {
      if (counts[val] === 4) {
        return val;
      }
    }
    return false;
  },

  straightFlush: function (hand) {
    var straight;
    var ret;
    if (check.flush(hand) && check.straight(hand)) {
      straight = check.straight(hand);
      ret = [straight, check.flush(hand)];
      return ret;
    }
    return false;
  },

  royalFlush: function (hand) {
    if (check.straightFlush(hand) && check.highCard(hand) === 'A') {
      return check.straightFlush(hand)[1];
    }
    return false;
  }
}

function higherCard(card1, card2) {
  var vals = ['2','3','4','5','6','7','8','9','T','J','Q','K','A'];
  var card1Rank = vals.indexOf(card1.value);
  var card2Rank = vals.indexOf(card2.value);

  if (card1Rank > card2Rank) {
    return card1;
  } else if (card1Rank < card2Rank) {
    return card2;
  } else {
    return false;
  }
}

function firstCardIsHigher(cardVal1, cardVal2) {
  var vals = ['2','3','4','5','6','7','8','9','T','J','Q','K','A'];
  var card1Rank = vals.indexOf(cardVal1);
  var card2Rank = vals.indexOf(cardVal2);

  if (card1Rank > card2Rank) {
    return true;
  } else {
    return false;
  }
}

function firstSuitIsHigher(suit1, suit2) {
  var suits = ['C','D','H','S'];
  var suit1Rank = suits.indexOf(suit1);
  var suit2Rank = suits.indexOf(suit2);

  if (suit1Rank > suit2Rank) {
    return true;
  } else {
    return false;
  }
}
